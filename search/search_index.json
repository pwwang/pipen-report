{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Report generation system for pipen . Installation \u276f pip install -U pipen-report # update configurations if needed: \u276f pipen report config # then update frontend dependencies: \u276f pipen report update Enabling/Disabling the plugin The plugin is registered via entrypoints. It's by default enabled. To disable it: plugins=[..., \"no:report\"] , or uninstall this plugin. Example See the pipeline in example/ , and the reports generated by the pipeline: https://pwwang.github.io/pipen-report/example/output/REPORTS Documentation See: https://pwwang.github.io/pipen-report","title":"Home"},{"location":"#installation","text":"\u276f pip install -U pipen-report # update configurations if needed: \u276f pipen report config # then update frontend dependencies: \u276f pipen report update","title":"Installation"},{"location":"#enablingdisabling-the-plugin","text":"The plugin is registered via entrypoints. It's by default enabled. To disable it: plugins=[..., \"no:report\"] , or uninstall this plugin.","title":"Enabling/Disabling the plugin"},{"location":"#example","text":"See the pipeline in example/ , and the reports generated by the pipeline: https://pwwang.github.io/pipen-report/example/output/REPORTS","title":"Example"},{"location":"#documentation","text":"See: https://pwwang.github.io/pipen-report","title":"Documentation"},{"location":"CHANGELOG/","text":"Change Log 0.23.14 feat: add copilot instructions for pipen-report feat: update import assertion for data.json to adopt node v22+ 0.23.13 chore: update dependencies fix: fix https link being treated as cloud path by cloudpathlib v0.23+ feat: support bunjs as frontend builder chore: update frontend dependencies 0.23.12 chore: bump yunpath to 0.0.5 feat: optimize npm checking and dir setting up fix: ensure extlibs directory is created without errors fix: update nmdir handling in _update command tests: update subprocess calls to use sys.executable chore: update frontend dependencies chore: update dependencies 0.23.11 fix: escape HTML in render_job headings 0.23.10 chore: require copier at least v9.5 chore: suppress DeprecationWarning for copier v9.10 chore: bump frontend @ibm/telemetry-js to 1.10.2 and @jridgewell/trace-mapping to 0.3.31 chore: set instantiate to True in PipenReport class 0.23.9 feat: add patch copier for fail-safe chmod handling chore: bump frontend dependencies to latest versions 0.23.8 fix: fix paging handling chore(deps): bump pipen to 0.17.13 chore(frontend): bump up frontend dependencies 0.23.7 fix: fix rsync_to_cloud function not syncing folders fix: fix preprocessing with gbatch scheduler style: improve formatting in _preprocess_math function fix: update path handling in render_job and _render_table functions chore(deps): bump pipen to 0.17.11 fix: ensure path is converted to string in _render_table chore: update .gitignore to include git bundle files 0.23.6 fix(ui): fix the theme selector not aligning to the right chore: update dependencies 0.23.5 chore(deps): bump pipen to 0.17.8 chore(deps): move docs dependencies to pypoetry.toml chore: update frontend dependencies in package-lock.json chore: update example report output 0.23.4 feat(front): add base64 encoding for Math tag content where the braces can avoided to be translate by svelte\u23ce 0.23.3 enh(font): update tab titles to show full names on hover feat(front): add Math component for rendering LaTeX expressions chore: update dependencies 0.23.2 feat: enhance ReportManager to support multiple cloud clients for outdir and workdir chore: bump up frontend deps 0.23.1 chore: suppress UserWarning when initializing GSClient in ReportManager chore: update poetry.lock to include latest dependencies 0.23.0 chore(deps): bump pipen to 0.17 0.22.0 chore: update pipen to 0.16.0 and related dependencies to latest feat: adopt the case where outdir is a cloud path (when pipen-gcs is applied) feat: enhance report manager to support cloud caching fix: use \".spec\" paths to render report templates feat: add example pipeline for gbatch scheduler feat: add ImageDimension component and integrate it into ImageDownloadList 0.21.4 chore: update pytest-cov to version 6 in dev dependencies feat: add markdown support for description rendering in reports chore: specify Node.js engine version range in package.json style: format code for improved readability and update max line length in tox.ini feat: run 'npm install' instead of 'npm update' for first-time setup in CLI chore: update rollup plugins and carbon-components-svelte to latest versions 0.21.3 chore: improve Plotly component with dynamic resizing 0.21.2 docs: update example output chore: add aspect-ratio and max-width to the Plotly component 0.21.1 feat: improve Iframe component with dynamic resizing and event dispatching feat: add Plotly component for displaying interactive plots feat: add containerClass prop to Iframe component refactor: add annotations for the Image component properties and optimize the code docs: add Plotly as registed relpath tags 0.21.0 deps: put pipen-runinfo into a extra dependency group deps: bump xqute to 0.5.3 deps: add pillow as dev-dependency for test deps: bump up frontend deps test: update pyproject.toml to ignore deprecation warning feat: add download bar for Image component feat: add configuration report_relpath_tags to allow register components for properties to convert fs path to url chore: add logging info when building each page fix: fix importing modules in external frontend modules 0.20.1 deps: bump pipen-runinfo to 0.8 0.20.0 deps: bump pipen to 0.15 0.19.0 refactor(frontend): use system.js (instead iife) to chunk vendor libraries deps: bump pipen to 0.14.6 and other deps to latest version deps: bump frontend deps to latest version ci: update ghp-import command to disable Jekyll processing ci: use latest actions 0.18.5 feat: indicate number of pages in log message 0.18.4 choir: remove caching for _render_file() . Template rendering can be dependent on the file contents (e.g. <job.outdir>/report.json ) 0.18.3 deps: bump pipen to 0.14.3 fix: fix download button for DataTable deps: bump frontend deps 0.18.2 fix: fix getting image size when path is None 0.18.1 enh: cache template rendering and preprocessing 0.18.0 deps: drop python3.8 support deps: bump pipen to 0.14 deps: use imagesize instead of pillow 0.17.3 fix: fix but when report_no_collapse_pgs is true 0.17.2 docs: center logo in readme feat: add Iframe component so loading is indicated 0.17.1 fix: fix toc links when index.html is hidden in url 0.17.0 deps: bump pipen to 0.13 0.16.3 fix: show index in datatable filter if any fix: exit pipeline when report building fails deps: bump pipen to 0.12.5 0.16.2 Fix home page caching issue Update frontend deps Fix tests for home page caching 0.16.1 Handle iframe src in preprocessing 0.16.0 Fix image height in global.css Add width and height to Image tag so loading indicators have same size Set sep to TAB for datatable filter Allow add class and other attributes to Descr component Allow set extra classes for Image component Add filters: render_component, render_ui and render_job Add carbon-preprocess-svelte package and optimize imports Update logo in README Update docs, using mkdocs-rtd Update docs/requirements.txt Remove emoji extension from mkdocs.yml Add pillow library Fix missing import for PILImage in preprocess.py Fix poetry installation in docs.yml Update copier version to 9.1.0 and colorama version to 0.4.6 Update favicon Allow to register components and uis for filters: render_component, render_ui and render_job Make proc list one column for narrow screen on index page Make proc group card on index page expand on top, instead of bottom, when short of space Make g10 as default theme Add width style to .head-util so the right part of the header do not hide when resizing Add space to bottom of the index page Make theme selector look better Change the background color of Accordion headers Add dropdown_switcher ui for render_ui and render_job filters Scroll anchor into view on the page Build report when process is done, instead of the whole pipeline Remove dest file when npm build fails (so that it won't be cached) Copy file only when its path is absolute in preprocessing Update global.css file 0.15.3 Fix image loading height in global.css 0.15.2 Set width and height to the lazy loading placeholder 0.15.1 Add title prop to Descr component 0.15.0 Add ellipsis to procgroup card on index page Add lazy loading for Image Add Descr component to $libs to add styled description text Add active nav item indicator Bump frontend packages to latest versions 0.14.0 \u2b06\ufe0f Bump pipen to 0.12 0.13.1 Improve the indicator of groups in report index page 0.13.0 \u2b06\ufe0f Bump pipen to 0.11 \u2b06\ufe0f Bump up frontend deps 0.12.8 \u2b06\ufe0f Update dependencies \ud83d\udc1b Fix report without headings 0.12.7 \ud83d\udc77 Add codesandbox scripts \ud83d\udc1b Fix order of procgroups in report 0.12.6 \ud83d\udc84 Make searchbox of DataTable persistent \ud83d\udc1b Fix npm build logging to file \u2728 Add column selector to DataTable \ud83d\udcdd Update example 0.12.5 \u2b06\ufe0f Bump copier to 8.1 (requires pydantic < 2) 0.12.4 \ud83d\udc84 Truncate proc names with ellipses in navigator 0.12.3 \ud83d\udc84 Use new favicon 0.12.2 \ud83d\udc84 Fix procs in procgroups in index page being contained 0.12.1 \u2b06\ufe0f Bump pipen-runinfo to 0.2 \ud83d\udcdd Update example with proc group 0.12.0 \u2728 Allow collapse proc groups \ud83c\udfa8 Improve logging in building process \u2705 Fix tests 0.11.0 \u2796 Remove cmdy \ud83d\udc1b Fix unnecessary npm output showing in logs \u2728 Add running information 0.10.0 \u2b06\ufe0f Bump pipen to 0.10.0 \ud83d\udc1b Adopt pipen 0.10.0 (change on_proc_init to on_proc_create) \u2b06\ufe0f Update frontend dependencies \u270f\ufe0f Change > to $ as command hint in logs\u23ce 0.9.0 \u2b06\ufe0f Bump pipen to 0.9 \u2b06\ufe0f Drop support for python 3.7 \u2b06\ufe0f Upgrade frontend dependents \u2b06\ufe0f Add pipen-filters as dev deps \ud83d\udc1b Fix a11y warning for frontend 0.8.0 \u2b06\ufe0f Upgrade pipen to 0.7 \u2b06\ufe0f Update frontend deps \ud83c\udfa8 Use css grid for proc list 0.7.2 \ud83d\udc1b Fix toc missing for paging \ud83d\udc1b Load ccs css first in html instead of compiled into js in defer mode \ud83d\udcdd Use a simpler example 0.7.1 \ud83d\udc84 Add single form of path alias \ud83d\udd27 Change default port to 18520 for serve command \u2b06\ufe0f Update frontend deps 0.7.0 \u2b06\ufe0f Update frontend deps \u2b06\ufe0f Bump pipen to 0.6 0.6.0 \ud83d\udc77 Use latest actions \ud83d\udc1b Add index.html so the reports work using file:// protocol \ud83d\udc1b Fix toc with paging \u2b06\ufe0f Bump pipen to 0.5 \ud83d\udcdd Update example 0.5.0 \u267b\ufe0f Refactor based on pipen v0.4 0.4.5 \ud83e\ude79 Fix some situations with dead links \ud83d\udc1b Fix error when node_modules mislinked to file-alike (#4) \u2b06\ufe0f Upgrade frontend deps \u2b06\ufe0f Pump pipen to 0.3.6 0.4.4 \u2728 Support Markdown tag \u2b06\ufe0f Upgrade frontend deps 0.4.3 \ud83d\udc1b Fix tag attributes missing in preprocessing 0.4.2 \u2b06\ufe0f Update frontend deps \ud83d\udc1b Fix the icon in DataTable and the example 0.4.1 \u2b06\ufe0f Upgrade xqute to v0.1 \u2796 Remove reduandent deps 0.4.0 \u2b06\ufe0f Upgrade frontend deps \u2b06\ufe0f Upgrade pipen to v0.3.0 0.3.1 \ud83d\udccc Pin dep and doc dep verions \u2728 Allow injected jupyter html to collapse code \ud83d\udcdd Add docs for CLI tools \ud83d\udca5 Default title to the title tag instead of h1 for cli inject \ud83d\udc1b Use on_init hook to init config \u2b06\ufe0f Upgrade frontend deps, so no longer need to patch svelte for large report \u2705 Add tests \ud83d\udc1b Fix renaming report from process with name index 0.3.0 \ud83d\udc1b Fix preprocessing with tag attribute value is empty \u2728 Implement a cli plugin for pipen to inject external html page to the report \ud83d\udccc Pin doc dep verions 0.2.3 Allow datatable filter to exclude columns 0.2.2 \ud83d\udc1b Fix no toc generated when no H1 in report but report_toc is True \ud83d\udc1b Fix report without H1 not getting preprocessed 0.2.1 \ud83d\udd0a Warn when there are > sections in report but paging is disabled \ud83d\ude91 Fix when there is no H1's in the report \ud83e\ude79 De-highlight the H1's in TOC when there are H2's in there \ud83d\udcdd Update example report \ud83d\udcdd Add post install/update necessities in README.md 0.2.0 \u267b\ufe0f Front: Use the builtin pagination table from ccs (carbon-design-system/carbon-components-svelte#702) \u2728 Implement backend report paging \ud83d\udca5 Change config item report_logging to report_loglevel \u2728 Implement frontend for report paging 0.1.1 \ud83d\udc1b Add postinstall to patch svelte compiler 0.1.0 \u2b06\ufe0f Update frontend deps \ud83d\udc1b Make a patch to svelte compiler to fix \"Max Stack Size Exceeded for huge HTML\" (sveltejs/svelte#4694) 0.0.15 \ud83d\udc1b Fix min ncols wrongly using number of rows of df in datatable filter 0.0.14 Replace all irregular characters in df column names in datatable filter 0.0.13 Preprocess embed tag 0.0.12 \ud83d\udc1b Fix #3 (same name toc link not working) and fix offset of toc links \ud83d\udc1b Don't cache non-export processes (Fix #2); \ud83d\udc1b Fix report_force_export not forcing process to export (#1) \ud83d\udc1b Fix issues when dot in column names at frontend for DataTable \u2b06\ufe0f Upgrade frontend dependencies 0.0.11 \u2728 Add process-level config report_toc to disable toc for a single process report 0.0.10 \ud83d\udc1b Fix larger nrows/ncols not working for datatable filter \ud83d\udc1b Fix multiple column alignment in index page 0.0.9 \ud83d\udc1b Allow relative script path to be inherited 0.0.8 \ud83e\ude79 Expand the TOC by default 0.0.7 \ud83d\udc1b Fix non-tags in pre-processing \u2b06\ufe0f Upgrade frontend deps \ud83e\ude79 Fix background of theme selector 0.0.6 \ud83e\ude79 Don't initilize if pipeline init fails \u2b06\ufe0f Upgrade pipen to 0.2+ in deps 0.0.5 \ud83d\udc1b Fix all procs other than those with report template to be included in the reports \u2728 Add report_order to define process order in report 0.0.4 \ud83d\udc1b Add fontend/src/pages directory to the repo 0.0.3 \u2728 Set export to True if report template is provided for a process 0.0.2 Refactor previous version with the frontend builtin.","title":"Change Log"},{"location":"CHANGELOG/#change-log","text":"","title":"Change Log"},{"location":"CHANGELOG/#02314","text":"feat: add copilot instructions for pipen-report feat: update import assertion for data.json to adopt node v22+","title":"0.23.14"},{"location":"CHANGELOG/#02313","text":"chore: update dependencies fix: fix https link being treated as cloud path by cloudpathlib v0.23+ feat: support bunjs as frontend builder chore: update frontend dependencies","title":"0.23.13"},{"location":"CHANGELOG/#02312","text":"chore: bump yunpath to 0.0.5 feat: optimize npm checking and dir setting up fix: ensure extlibs directory is created without errors fix: update nmdir handling in _update command tests: update subprocess calls to use sys.executable chore: update frontend dependencies chore: update dependencies","title":"0.23.12"},{"location":"CHANGELOG/#02311","text":"fix: escape HTML in render_job headings","title":"0.23.11"},{"location":"CHANGELOG/#02310","text":"chore: require copier at least v9.5 chore: suppress DeprecationWarning for copier v9.10 chore: bump frontend @ibm/telemetry-js to 1.10.2 and @jridgewell/trace-mapping to 0.3.31 chore: set instantiate to True in PipenReport class","title":"0.23.10"},{"location":"CHANGELOG/#0239","text":"feat: add patch copier for fail-safe chmod handling chore: bump frontend dependencies to latest versions","title":"0.23.9"},{"location":"CHANGELOG/#0238","text":"fix: fix paging handling chore(deps): bump pipen to 0.17.13 chore(frontend): bump up frontend dependencies","title":"0.23.8"},{"location":"CHANGELOG/#0237","text":"fix: fix rsync_to_cloud function not syncing folders fix: fix preprocessing with gbatch scheduler style: improve formatting in _preprocess_math function fix: update path handling in render_job and _render_table functions chore(deps): bump pipen to 0.17.11 fix: ensure path is converted to string in _render_table chore: update .gitignore to include git bundle files","title":"0.23.7"},{"location":"CHANGELOG/#0236","text":"fix(ui): fix the theme selector not aligning to the right chore: update dependencies","title":"0.23.6"},{"location":"CHANGELOG/#0235","text":"chore(deps): bump pipen to 0.17.8 chore(deps): move docs dependencies to pypoetry.toml chore: update frontend dependencies in package-lock.json chore: update example report output","title":"0.23.5"},{"location":"CHANGELOG/#0234","text":"feat(front): add base64 encoding for Math tag content where the braces can avoided to be translate by svelte\u23ce","title":"0.23.4"},{"location":"CHANGELOG/#0233","text":"enh(font): update tab titles to show full names on hover feat(front): add Math component for rendering LaTeX expressions chore: update dependencies","title":"0.23.3"},{"location":"CHANGELOG/#0232","text":"feat: enhance ReportManager to support multiple cloud clients for outdir and workdir chore: bump up frontend deps","title":"0.23.2"},{"location":"CHANGELOG/#0231","text":"chore: suppress UserWarning when initializing GSClient in ReportManager chore: update poetry.lock to include latest dependencies","title":"0.23.1"},{"location":"CHANGELOG/#0230","text":"chore(deps): bump pipen to 0.17","title":"0.23.0"},{"location":"CHANGELOG/#0220","text":"chore: update pipen to 0.16.0 and related dependencies to latest feat: adopt the case where outdir is a cloud path (when pipen-gcs is applied) feat: enhance report manager to support cloud caching fix: use \".spec\" paths to render report templates feat: add example pipeline for gbatch scheduler feat: add ImageDimension component and integrate it into ImageDownloadList","title":"0.22.0"},{"location":"CHANGELOG/#0214","text":"chore: update pytest-cov to version 6 in dev dependencies feat: add markdown support for description rendering in reports chore: specify Node.js engine version range in package.json style: format code for improved readability and update max line length in tox.ini feat: run 'npm install' instead of 'npm update' for first-time setup in CLI chore: update rollup plugins and carbon-components-svelte to latest versions","title":"0.21.4"},{"location":"CHANGELOG/#0213","text":"chore: improve Plotly component with dynamic resizing","title":"0.21.3"},{"location":"CHANGELOG/#0212","text":"docs: update example output chore: add aspect-ratio and max-width to the Plotly component","title":"0.21.2"},{"location":"CHANGELOG/#0211","text":"feat: improve Iframe component with dynamic resizing and event dispatching feat: add Plotly component for displaying interactive plots feat: add containerClass prop to Iframe component refactor: add annotations for the Image component properties and optimize the code docs: add Plotly as registed relpath tags","title":"0.21.1"},{"location":"CHANGELOG/#0210","text":"deps: put pipen-runinfo into a extra dependency group deps: bump xqute to 0.5.3 deps: add pillow as dev-dependency for test deps: bump up frontend deps test: update pyproject.toml to ignore deprecation warning feat: add download bar for Image component feat: add configuration report_relpath_tags to allow register components for properties to convert fs path to url chore: add logging info when building each page fix: fix importing modules in external frontend modules","title":"0.21.0"},{"location":"CHANGELOG/#0201","text":"deps: bump pipen-runinfo to 0.8","title":"0.20.1"},{"location":"CHANGELOG/#0200","text":"deps: bump pipen to 0.15","title":"0.20.0"},{"location":"CHANGELOG/#0190","text":"refactor(frontend): use system.js (instead iife) to chunk vendor libraries deps: bump pipen to 0.14.6 and other deps to latest version deps: bump frontend deps to latest version ci: update ghp-import command to disable Jekyll processing ci: use latest actions","title":"0.19.0"},{"location":"CHANGELOG/#0185","text":"feat: indicate number of pages in log message","title":"0.18.5"},{"location":"CHANGELOG/#0184","text":"choir: remove caching for _render_file() . Template rendering can be dependent on the file contents (e.g. <job.outdir>/report.json )","title":"0.18.4"},{"location":"CHANGELOG/#0183","text":"deps: bump pipen to 0.14.3 fix: fix download button for DataTable deps: bump frontend deps","title":"0.18.3"},{"location":"CHANGELOG/#0182","text":"fix: fix getting image size when path is None","title":"0.18.2"},{"location":"CHANGELOG/#0181","text":"enh: cache template rendering and preprocessing","title":"0.18.1"},{"location":"CHANGELOG/#0180","text":"deps: drop python3.8 support deps: bump pipen to 0.14 deps: use imagesize instead of pillow","title":"0.18.0"},{"location":"CHANGELOG/#0173","text":"fix: fix but when report_no_collapse_pgs is true","title":"0.17.3"},{"location":"CHANGELOG/#0172","text":"docs: center logo in readme feat: add Iframe component so loading is indicated","title":"0.17.2"},{"location":"CHANGELOG/#0171","text":"fix: fix toc links when index.html is hidden in url","title":"0.17.1"},{"location":"CHANGELOG/#0170","text":"deps: bump pipen to 0.13","title":"0.17.0"},{"location":"CHANGELOG/#0163","text":"fix: show index in datatable filter if any fix: exit pipeline when report building fails deps: bump pipen to 0.12.5","title":"0.16.3"},{"location":"CHANGELOG/#0162","text":"Fix home page caching issue Update frontend deps Fix tests for home page caching","title":"0.16.2"},{"location":"CHANGELOG/#0161","text":"Handle iframe src in preprocessing","title":"0.16.1"},{"location":"CHANGELOG/#0160","text":"Fix image height in global.css Add width and height to Image tag so loading indicators have same size Set sep to TAB for datatable filter Allow add class and other attributes to Descr component Allow set extra classes for Image component Add filters: render_component, render_ui and render_job Add carbon-preprocess-svelte package and optimize imports Update logo in README Update docs, using mkdocs-rtd Update docs/requirements.txt Remove emoji extension from mkdocs.yml Add pillow library Fix missing import for PILImage in preprocess.py Fix poetry installation in docs.yml Update copier version to 9.1.0 and colorama version to 0.4.6 Update favicon Allow to register components and uis for filters: render_component, render_ui and render_job Make proc list one column for narrow screen on index page Make proc group card on index page expand on top, instead of bottom, when short of space Make g10 as default theme Add width style to .head-util so the right part of the header do not hide when resizing Add space to bottom of the index page Make theme selector look better Change the background color of Accordion headers Add dropdown_switcher ui for render_ui and render_job filters Scroll anchor into view on the page Build report when process is done, instead of the whole pipeline Remove dest file when npm build fails (so that it won't be cached) Copy file only when its path is absolute in preprocessing Update global.css file","title":"0.16.0"},{"location":"CHANGELOG/#0153","text":"Fix image loading height in global.css","title":"0.15.3"},{"location":"CHANGELOG/#0152","text":"Set width and height to the lazy loading placeholder","title":"0.15.2"},{"location":"CHANGELOG/#0151","text":"Add title prop to Descr component","title":"0.15.1"},{"location":"CHANGELOG/#0150","text":"Add ellipsis to procgroup card on index page Add lazy loading for Image Add Descr component to $libs to add styled description text Add active nav item indicator Bump frontend packages to latest versions","title":"0.15.0"},{"location":"CHANGELOG/#0140","text":"\u2b06\ufe0f Bump pipen to 0.12","title":"0.14.0"},{"location":"CHANGELOG/#0131","text":"Improve the indicator of groups in report index page","title":"0.13.1"},{"location":"CHANGELOG/#0130","text":"\u2b06\ufe0f Bump pipen to 0.11 \u2b06\ufe0f Bump up frontend deps","title":"0.13.0"},{"location":"CHANGELOG/#0128","text":"\u2b06\ufe0f Update dependencies \ud83d\udc1b Fix report without headings","title":"0.12.8"},{"location":"CHANGELOG/#0127","text":"\ud83d\udc77 Add codesandbox scripts \ud83d\udc1b Fix order of procgroups in report","title":"0.12.7"},{"location":"CHANGELOG/#0126","text":"\ud83d\udc84 Make searchbox of DataTable persistent \ud83d\udc1b Fix npm build logging to file \u2728 Add column selector to DataTable \ud83d\udcdd Update example","title":"0.12.6"},{"location":"CHANGELOG/#0125","text":"\u2b06\ufe0f Bump copier to 8.1 (requires pydantic < 2)","title":"0.12.5"},{"location":"CHANGELOG/#0124","text":"\ud83d\udc84 Truncate proc names with ellipses in navigator","title":"0.12.4"},{"location":"CHANGELOG/#0123","text":"\ud83d\udc84 Use new favicon","title":"0.12.3"},{"location":"CHANGELOG/#0122","text":"\ud83d\udc84 Fix procs in procgroups in index page being contained","title":"0.12.2"},{"location":"CHANGELOG/#0121","text":"\u2b06\ufe0f Bump pipen-runinfo to 0.2 \ud83d\udcdd Update example with proc group","title":"0.12.1"},{"location":"CHANGELOG/#0120","text":"\u2728 Allow collapse proc groups \ud83c\udfa8 Improve logging in building process \u2705 Fix tests","title":"0.12.0"},{"location":"CHANGELOG/#0110","text":"\u2796 Remove cmdy \ud83d\udc1b Fix unnecessary npm output showing in logs \u2728 Add running information","title":"0.11.0"},{"location":"CHANGELOG/#0100","text":"\u2b06\ufe0f Bump pipen to 0.10.0 \ud83d\udc1b Adopt pipen 0.10.0 (change on_proc_init to on_proc_create) \u2b06\ufe0f Update frontend dependencies \u270f\ufe0f Change > to $ as command hint in logs\u23ce","title":"0.10.0"},{"location":"CHANGELOG/#090","text":"\u2b06\ufe0f Bump pipen to 0.9 \u2b06\ufe0f Drop support for python 3.7 \u2b06\ufe0f Upgrade frontend dependents \u2b06\ufe0f Add pipen-filters as dev deps \ud83d\udc1b Fix a11y warning for frontend","title":"0.9.0"},{"location":"CHANGELOG/#080","text":"\u2b06\ufe0f Upgrade pipen to 0.7 \u2b06\ufe0f Update frontend deps \ud83c\udfa8 Use css grid for proc list","title":"0.8.0"},{"location":"CHANGELOG/#072","text":"\ud83d\udc1b Fix toc missing for paging \ud83d\udc1b Load ccs css first in html instead of compiled into js in defer mode \ud83d\udcdd Use a simpler example","title":"0.7.2"},{"location":"CHANGELOG/#071","text":"\ud83d\udc84 Add single form of path alias \ud83d\udd27 Change default port to 18520 for serve command \u2b06\ufe0f Update frontend deps","title":"0.7.1"},{"location":"CHANGELOG/#070","text":"\u2b06\ufe0f Update frontend deps \u2b06\ufe0f Bump pipen to 0.6","title":"0.7.0"},{"location":"CHANGELOG/#060","text":"\ud83d\udc77 Use latest actions \ud83d\udc1b Add index.html so the reports work using file:// protocol \ud83d\udc1b Fix toc with paging \u2b06\ufe0f Bump pipen to 0.5 \ud83d\udcdd Update example","title":"0.6.0"},{"location":"CHANGELOG/#050","text":"\u267b\ufe0f Refactor based on pipen v0.4","title":"0.5.0"},{"location":"CHANGELOG/#045","text":"\ud83e\ude79 Fix some situations with dead links \ud83d\udc1b Fix error when node_modules mislinked to file-alike (#4) \u2b06\ufe0f Upgrade frontend deps \u2b06\ufe0f Pump pipen to 0.3.6","title":"0.4.5"},{"location":"CHANGELOG/#044","text":"\u2728 Support Markdown tag \u2b06\ufe0f Upgrade frontend deps","title":"0.4.4"},{"location":"CHANGELOG/#043","text":"\ud83d\udc1b Fix tag attributes missing in preprocessing","title":"0.4.3"},{"location":"CHANGELOG/#042","text":"\u2b06\ufe0f Update frontend deps \ud83d\udc1b Fix the icon in DataTable and the example","title":"0.4.2"},{"location":"CHANGELOG/#041","text":"\u2b06\ufe0f Upgrade xqute to v0.1 \u2796 Remove reduandent deps","title":"0.4.1"},{"location":"CHANGELOG/#040","text":"\u2b06\ufe0f Upgrade frontend deps \u2b06\ufe0f Upgrade pipen to v0.3.0","title":"0.4.0"},{"location":"CHANGELOG/#031","text":"\ud83d\udccc Pin dep and doc dep verions \u2728 Allow injected jupyter html to collapse code \ud83d\udcdd Add docs for CLI tools \ud83d\udca5 Default title to the title tag instead of h1 for cli inject \ud83d\udc1b Use on_init hook to init config \u2b06\ufe0f Upgrade frontend deps, so no longer need to patch svelte for large report \u2705 Add tests \ud83d\udc1b Fix renaming report from process with name index","title":"0.3.1"},{"location":"CHANGELOG/#030","text":"\ud83d\udc1b Fix preprocessing with tag attribute value is empty \u2728 Implement a cli plugin for pipen to inject external html page to the report \ud83d\udccc Pin doc dep verions","title":"0.3.0"},{"location":"CHANGELOG/#023","text":"Allow datatable filter to exclude columns","title":"0.2.3"},{"location":"CHANGELOG/#022","text":"\ud83d\udc1b Fix no toc generated when no H1 in report but report_toc is True \ud83d\udc1b Fix report without H1 not getting preprocessed","title":"0.2.2"},{"location":"CHANGELOG/#021","text":"\ud83d\udd0a Warn when there are > sections in report but paging is disabled \ud83d\ude91 Fix when there is no H1's in the report \ud83e\ude79 De-highlight the H1's in TOC when there are H2's in there \ud83d\udcdd Update example report \ud83d\udcdd Add post install/update necessities in README.md","title":"0.2.1"},{"location":"CHANGELOG/#020","text":"\u267b\ufe0f Front: Use the builtin pagination table from ccs (carbon-design-system/carbon-components-svelte#702) \u2728 Implement backend report paging \ud83d\udca5 Change config item report_logging to report_loglevel \u2728 Implement frontend for report paging","title":"0.2.0"},{"location":"CHANGELOG/#011","text":"\ud83d\udc1b Add postinstall to patch svelte compiler","title":"0.1.1"},{"location":"CHANGELOG/#010","text":"\u2b06\ufe0f Update frontend deps \ud83d\udc1b Make a patch to svelte compiler to fix \"Max Stack Size Exceeded for huge HTML\" (sveltejs/svelte#4694)","title":"0.1.0"},{"location":"CHANGELOG/#0015","text":"\ud83d\udc1b Fix min ncols wrongly using number of rows of df in datatable filter","title":"0.0.15"},{"location":"CHANGELOG/#0014","text":"Replace all irregular characters in df column names in datatable filter","title":"0.0.14"},{"location":"CHANGELOG/#0013","text":"Preprocess embed tag","title":"0.0.13"},{"location":"CHANGELOG/#0012","text":"\ud83d\udc1b Fix #3 (same name toc link not working) and fix offset of toc links \ud83d\udc1b Don't cache non-export processes (Fix #2); \ud83d\udc1b Fix report_force_export not forcing process to export (#1) \ud83d\udc1b Fix issues when dot in column names at frontend for DataTable \u2b06\ufe0f Upgrade frontend dependencies","title":"0.0.12"},{"location":"CHANGELOG/#0011","text":"\u2728 Add process-level config report_toc to disable toc for a single process report","title":"0.0.11"},{"location":"CHANGELOG/#0010","text":"\ud83d\udc1b Fix larger nrows/ncols not working for datatable filter \ud83d\udc1b Fix multiple column alignment in index page","title":"0.0.10"},{"location":"CHANGELOG/#009","text":"\ud83d\udc1b Allow relative script path to be inherited","title":"0.0.9"},{"location":"CHANGELOG/#008","text":"\ud83e\ude79 Expand the TOC by default","title":"0.0.8"},{"location":"CHANGELOG/#007","text":"\ud83d\udc1b Fix non-tags in pre-processing \u2b06\ufe0f Upgrade frontend deps \ud83e\ude79 Fix background of theme selector","title":"0.0.7"},{"location":"CHANGELOG/#006","text":"\ud83e\ude79 Don't initilize if pipeline init fails \u2b06\ufe0f Upgrade pipen to 0.2+ in deps","title":"0.0.6"},{"location":"CHANGELOG/#005","text":"\ud83d\udc1b Fix all procs other than those with report template to be included in the reports \u2728 Add report_order to define process order in report","title":"0.0.5"},{"location":"CHANGELOG/#004","text":"\ud83d\udc1b Add fontend/src/pages directory to the repo","title":"0.0.4"},{"location":"CHANGELOG/#003","text":"\u2728 Set export to True if report template is provided for a process","title":"0.0.3"},{"location":"CHANGELOG/#002","text":"Refactor previous version with the frontend builtin.","title":"0.0.2"},{"location":"cli/","text":"CLI tools List available CLI tools: \u276f pipen report --help Usage: pipen report [ -h ] { config,update,serve } ... CLI utility for pipen-report Optional Arguments: -h, --help show help message and exit Subcommands: config Configure pipen-report update Install/Update the frontend dependencies serve Serve the report config Configure pipen-report. Note that these values can still be overwritten by the pipeline configurations at runtime. \u276f pipen report config --help Usage: pipen report config [ -h ] [ --local ] [ --list ] [ --extlibs EXTLIBS ] [ --npm NPM ] [ --nmdir NMDIR ] [ --nobuild ] Optional Arguments: -h, --help show help message and exit --local, -l Save the configuration locally ( ./.pipen-report.toml ) ? Otherwise, the configuration will be saved globally in the user 's home directory (~/.pipen- report.toml). The local configuration has higher priority than the global configuration. [default: False] --list List the configuration [default: False] --extlibs EXTLIBS External components to be used in the report --npm NPM The path to npm [default: npm] --nmdir NMDIR Where should the frontend dependencies installed? By default, the frontend dependencies will be installed in frontend/ of the python package directory. However, this directory may not be writable. In this case, the frontend dependencies will be installed in the directory specified. [default: /home/pwwang/github/pipen-report/pipen_report/frontend] --nobuild Don' t build the final report. If True only preprare the environment Say if you want to do the building manually [ default: False ] update Install/Update the frontend dependencies: \u276f pipen report update --help Usage: pipen report update [ -h ] Optional Arguments: -h, --help show help message and exit serve Serve the report: \u276f pipen report serve --help Usage: pipen report serve [ -h ] [ --port PORT ] [ --host HOST ] --reportdir REPORTDIR Required Arguments: --reportdir REPORTDIR, -r REPORTDIR The directory of the reports, where the REPORTS/ directory is Optional Arguments: -h, --help show help message and exit --port PORT, -p PORT The port to serve the report [ default: 8525 ] --host HOST The host to serve the report [ default: 127 .0.0.1 ]","title":"CLI tools"},{"location":"cli/#cli-tools","text":"List available CLI tools: \u276f pipen report --help Usage: pipen report [ -h ] { config,update,serve } ... CLI utility for pipen-report Optional Arguments: -h, --help show help message and exit Subcommands: config Configure pipen-report update Install/Update the frontend dependencies serve Serve the report","title":"CLI tools"},{"location":"cli/#config","text":"Configure pipen-report. Note that these values can still be overwritten by the pipeline configurations at runtime. \u276f pipen report config --help Usage: pipen report config [ -h ] [ --local ] [ --list ] [ --extlibs EXTLIBS ] [ --npm NPM ] [ --nmdir NMDIR ] [ --nobuild ] Optional Arguments: -h, --help show help message and exit --local, -l Save the configuration locally ( ./.pipen-report.toml ) ? Otherwise, the configuration will be saved globally in the user 's home directory (~/.pipen- report.toml). The local configuration has higher priority than the global configuration. [default: False] --list List the configuration [default: False] --extlibs EXTLIBS External components to be used in the report --npm NPM The path to npm [default: npm] --nmdir NMDIR Where should the frontend dependencies installed? By default, the frontend dependencies will be installed in frontend/ of the python package directory. However, this directory may not be writable. In this case, the frontend dependencies will be installed in the directory specified. [default: /home/pwwang/github/pipen-report/pipen_report/frontend] --nobuild Don' t build the final report. If True only preprare the environment Say if you want to do the building manually [ default: False ]","title":"config"},{"location":"cli/#update","text":"Install/Update the frontend dependencies: \u276f pipen report update --help Usage: pipen report update [ -h ] Optional Arguments: -h, --help show help message and exit","title":"update"},{"location":"cli/#serve","text":"Serve the report: \u276f pipen report serve --help Usage: pipen report serve [ -h ] [ --port PORT ] [ --host HOST ] --reportdir REPORTDIR Required Arguments: --reportdir REPORTDIR, -r REPORTDIR The directory of the reports, where the REPORTS/ directory is Optional Arguments: -h, --help show help message and exit --port PORT, -p PORT The port to serve the report [ default: 8525 ] --host HOST The host to serve the report [ default: 127 .0.0.1 ]","title":"serve"},{"location":"configurations/","text":"Configurations Configurations should be set under plugin_opts . Just like configurations for pipen , there are two levels of configuration items: process-level and pipeline-level. Process-level configurations should set at process definition. They can, however, be initialized at pipeline creation or in a configuration file, then those will apply to ALL processes if they are not set at process definition. Pipeline-level configurations are not set in configuration files or pipeline creation. Set values at process definition won't affect it. report Process-level. Default: None The report template. If None , no report will be generated for this process. If the template is a file, use a file:// prefix: file:///path/to/template report_order Process-level. Default: 0 The order of the process to show in the index page and app menu report_toc Process-level. Default: True Whether add TOC (left-side navigation) to the process report report_npm Pipeline-level. Default: \"npm\" The path to npm , in case you don't have it installed in $PAT report_nmdir Pipeline-level. Default: \"~/.pipen-report\" Where to save the node_modules directory (frontend dependencies), or where to run npm install . pipen-report will first try to run npm install at frontend of the package directory. However, if you don't have the write privileges to the directory (i.e. The package is installed by admin), we will try to run npm install in the given directory ( package.json will be copied there). Another way is that you install this package in user mode: pip install --user -U pipen-report The frontend dependencies are install once, and will be shared across all pipelines. report_nobuild Pipeline-level. Default: False Don't build the reports, but just setup the frontend environment. You can build the reports by yourself manually at <pipeline-workdir>/<pipeline-name>/.report-workdir report_loglevel Pipeline-level Default: \"info\" The logging level of the pipen-report logger. It won't affect the pipen's main logger. report_force_export Pipeline-level Default: True Force the process to export output when report template is given report_no_collapse_pgs Pipeline-level Default: False (collapse all procgroups) Don't collapse procgroups in the report. This is useful when you want to see the processes of the procgroup in the index page. Could be either a procgroup name, a list of procgroup names or True (don't collapse any procgroups) report_relpath_tags Pipeline-level Default: None Tags with properties that need to convert to relative paths i.e. {\"Image\": \"src\"} . This is useful when you have a custom component that has a property that is a path to a resource. See Converting paths to urls for more information. report_paging Process-level Default: False Break the process report into pages. They are split by h1 tags, which has to be top-level tags. For example: <script> // ... </script> <h1>Section1</h1> content1 <h1>Section2</h1> content2 <h1>Section3</h1> content3 When report_paging = 2 , then the report will be split into: <script> // ... </script> <h1>Section1</h1> content1 <h1>Section2</h1> content2 and <script> // ... </script> <h1>Section3</h1> content3 Note that the TOC will still show all items and when clicking one of them, the right page will be shown.","title":"Configurations"},{"location":"configurations/#configurations","text":"Configurations should be set under plugin_opts . Just like configurations for pipen , there are two levels of configuration items: process-level and pipeline-level. Process-level configurations should set at process definition. They can, however, be initialized at pipeline creation or in a configuration file, then those will apply to ALL processes if they are not set at process definition. Pipeline-level configurations are not set in configuration files or pipeline creation. Set values at process definition won't affect it.","title":"Configurations"},{"location":"configurations/#report","text":"Process-level. Default: None The report template. If None , no report will be generated for this process. If the template is a file, use a file:// prefix: file:///path/to/template","title":"report"},{"location":"configurations/#report_order","text":"Process-level. Default: 0 The order of the process to show in the index page and app menu","title":"report_order"},{"location":"configurations/#report_toc","text":"Process-level. Default: True Whether add TOC (left-side navigation) to the process report","title":"report_toc"},{"location":"configurations/#report_npm","text":"Pipeline-level. Default: \"npm\" The path to npm , in case you don't have it installed in $PAT","title":"report_npm"},{"location":"configurations/#report_nmdir","text":"Pipeline-level. Default: \"~/.pipen-report\" Where to save the node_modules directory (frontend dependencies), or where to run npm install . pipen-report will first try to run npm install at frontend of the package directory. However, if you don't have the write privileges to the directory (i.e. The package is installed by admin), we will try to run npm install in the given directory ( package.json will be copied there). Another way is that you install this package in user mode: pip install --user -U pipen-report The frontend dependencies are install once, and will be shared across all pipelines.","title":"report_nmdir"},{"location":"configurations/#report_nobuild","text":"Pipeline-level. Default: False Don't build the reports, but just setup the frontend environment. You can build the reports by yourself manually at <pipeline-workdir>/<pipeline-name>/.report-workdir","title":"report_nobuild"},{"location":"configurations/#report_loglevel","text":"Pipeline-level Default: \"info\" The logging level of the pipen-report logger. It won't affect the pipen's main logger.","title":"report_loglevel"},{"location":"configurations/#report_force_export","text":"Pipeline-level Default: True Force the process to export output when report template is given","title":"report_force_export"},{"location":"configurations/#report_no_collapse_pgs","text":"Pipeline-level Default: False (collapse all procgroups) Don't collapse procgroups in the report. This is useful when you want to see the processes of the procgroup in the index page. Could be either a procgroup name, a list of procgroup names or True (don't collapse any procgroups)","title":"report_no_collapse_pgs"},{"location":"configurations/#report_relpath_tags","text":"Pipeline-level Default: None Tags with properties that need to convert to relative paths i.e. {\"Image\": \"src\"} . This is useful when you have a custom component that has a property that is a path to a resource. See Converting paths to urls for more information.","title":"report_relpath_tags"},{"location":"configurations/#report_paging","text":"Process-level Default: False Break the process report into pages. They are split by h1 tags, which has to be top-level tags. For example: <script> // ... </script> <h1>Section1</h1> content1 <h1>Section2</h1> content2 <h1>Section3</h1> content3 When report_paging = 2 , then the report will be split into: <script> // ... </script> <h1>Section1</h1> content1 <h1>Section2</h1> content2 and <script> // ... </script> <h1>Section3</h1> content3 Note that the TOC will still show all items and when clicking one of them, the right page will be shown.","title":"report_paging"},{"location":"filters/","text":"Filters Filters are used in template rendering. They are defined in filters.py and can be used in the template files. datatable Read data from a file, using pandas.read_csv() and make it to json so js can handle it and render it with <DataTable /> Args: path (PathLike): The path to the data file. *args (Any): Additional positional arguments to pass to pandas.read_csv(). ncols (Union[int, Iterable], optional): Either the number of columns to select or an iterable of column indices or names. Defaults to None. nrows (Union[int, Iterable], optional): Either the number of rows to select or an iterable of row indices. Defaults to None. double_precision (int, optional): The precision for double numbers. See also pandas.DataFrame.to_json(). Defaults to 4. excluded (set, optional): A set of column names to exclude from the resulting DataFrame. Defaults to None. **kwargs (Any): Additional keyword arguments to pass to pandas.read_csv(). Note that sep is set to \"\\t\" instead of , by default. Returns: str : A JSON format of the data. Examples: < DataTable data = \"{{ '/path/to/data.tsv' | datatable: nrows=10) }}\" /> < DataTable data = \"{{ '/path/to/data.tsv' | datatable: nrows=10, excluded={'col1', 'col2'}) }}\" /> render_job Generate the svelte components for a job. Args: job (Mapping[str, Any]): The job object used to render the template. report_file (str): Absolute path to a report file or relative to job.outdir h (int): The starting level of the headers Examples: A json should be defined at <job.outdir>/report.json for the report structure: { \"h1\" : { \"h2\" : { \"h3\" : { \"ui\" : [ { \"kind\" : \"datatable\" , \"src\" : \"data.tsv\" }, # more compo nents ] } } } } The h2 and h3 are optional. You can set them to #xxx to let pipen-report to ignore them. Same h2 s are also supported. You can use #<suffiex> to make them different. For example, Heading2#1 and Heading2#2 to have two h2 with the same name under the same h1 . For details of ui and components, see following sections. render_ui Render a set of components with a certain ui layout. In the report.json file, under h3 , you should specify a dict with ui keys, which defined a large set of components. Supported ui s are: flat : The components will be rendered sequentially. tabs : The components will be rendered as tabs. Each component should be with kind \"tab\" . If not specified, kind = \"tab\" will be added automatically. table_of_images : The components will be rendered as a table of images. Each component should be with kind \"table_image\" . If not specified, kind = \"image\" will be added automatically. You can specify the number of columns like table_of_images:3 . The default number of columns is 2. accordion : The components will be rendered as an accordion. Each component should be with kind \"accordion\" . If not specified, kind = \"accordion\" will be added automatically. This can also be used as a filter in the template files by passing a json object and the ui : Args: contents (List[Mapping[str, Any]]): The contents of components to render. ui (str): The ui layout to render. job (Mapping[str, Any]): The job object used to render the template. level (int): The indent level of the components. Defaults to 0. UI: flat A flat ui will render the components sequentially. < Component1 /> < Component2 /> < Component3 /> <!-- ... --> UI: tabs A tabs ui will render the components as tabs. See also the Tabs component of carbon-components-svelte . < Tabs > < Tab label = \"Component1\" /> < Tab label = \"Component2\" /> < Tab title = \"Component3\" /> < svelte:fragment > < TabContent > < ui of Component1 /> </ TabContent > < TabContent > < ui of Component2 /> </ TabContent > < TabContent > < ui of Component3 /> </ TabContent > </ svelte:fragment > </ Tabs > See also Component: `tab for how each component is rendered. UI: table_of_images A table_of_images ui will render the components as a table of images. < div class = \"pipen-report-table-of-images\" style = \"grid-template-columns: repeat(2, auto); \" > < div > <!-- A tab_image component --> < Descr title = \"Image 2\" class = \"pipen-report-table-image-descr\" > This is a description about the image. </ Descr > < Image src = \"placeholder.png\" class = \"pipen-report-table-image\" width = { 526 } height = { 360 } /> <!-- end of tab_image component --> </ div > < div > < Descr title = \"Image 3\" class = \"pipen-report-table-image-descr\" > This is a description about the image. </ Descr > < Image src = \"placeholder.png\" class = \"pipen-report-table-image\" width = { 526 } height = { 360 } /> </ div > </ div > See also Component: table_image for how each component is rendered. UI: accordion A accordion ui will render the components as an accordion. See also the Accordion component of carbon-components-svelte . < Accordion > < AccordionItem title = \"title of Component1\" > < ui of Component1 /> </ AccordionItem > < AccordionItem title = \"title of Component2\" > < ui of Component2 /> </ AccordionItem > < AccordionItem title = \"title of Component3\" > < ui of Component3 /> </ AccordionItem > </ Accordion > See also Component: accordion for how each component is rendered. render_component Each component of the ui should be rendered with this filter. Args: component (Mapping[str, Any]): The component to render. job (Mapping[str, Any]): The job object used to render the template. level (int): The indent level of the components. Defaults to 0. Component: accordion Full configuration of an accordion item: { \"kind\" : \"accordion\" , # When under an `accordion` ui, this can be omitted \"title\" : \"title of the accordion\" , \"ui\" : \"flat\" , # The ui of the components under this accordion item \"contents\" : [ ... ] # The components to render under this accordion item using the `ui` } This will be rendered as: < AccordionItem title = \"title of the accordion\" > < ui of the components under this accordion item using the ` ui ` /> </ AccordionItem > Component: descr Full configuration of a descr component: { \"kind\" : \"descr\" , \"title\" : \"title of the descr\" , # or use key `name` \"content\" : \"The description content\" , # or use key `descr` } This will be rendered as: < Descr title = \"title of the descr\" > The description content </ Descr > Component: error Full configuration of an error component: { \"kind\" : \"error\" , \"content\" : \"The error content\" , \"kind_\" : \"warning\" , # use the warning style by default # more props passed to InlineNotification } This will be rendered as: < InlineNotification kind = \"warning\" > The error content </ InlineNotification > See also the InlineNotification component of carbon-components-svelte . Component: list Render a list of items. Full configuration of a list component: { \"kind\" : \"list\" , \"items\" : [ \"item1\" , \"item2\" , \"item3\" , # ... ], \"ordered\" : False , # Whether to render an ordered list (OrderedList) } This will be rendered as: < UnorderedList > < ListItem > item1 </ ListItem > < ListItem > item2 </ ListItem > < ListItem > item3 </ ListItem > <!-- ... --> </ UnorderedList > Component: table Render a data table. Full configuration of a table component: { \"kind\" : \"table\" , # Arguments passed to pandas.read_csv() # See datatable filter for details # If path is not specified, `src` will be used \"data\" : {}, # The path to the data file # You can set to False, so that download the datafile is disabled # If so, you need to set path in `data` to let the datatable filter to read the data \"src\" : \"/path/to/data.tsv\" , # Other arguments passed to DataTable } This will be rendered as: < DataTable data = { [ ... ] } /> See also the DataTable component of carbon-components-svelte . Component: image Render an image. Full configuration of an image component: { \"kind\" : \"image\" , \"src\" : \"/path/to/image.png\" , # The path to the image file \"width\" : 526 , # The width of the image \"height\" : 360 , # The height of the image # Other arguments passed to Image } This will be rendered as: < Image src = \"/path/to/image.png\" width = { 526 } height = { 360 } /> The width and height are optional. If not specified, the size will be obtained from the image file using pillow . This is useful for the loading placeholder to have the same size as the image. Component: table_image Render a table of images. Full configuration of a table_image component: { \"kind\" : \"table_image\" , \"src\" : \"/path/to/image.png\" , # The path to the image file \"name\" : \"Image 1\" , # The name of the image \"descr\" : \"This is a description about the image.\" , # The description of the image # Other arguments passed to Image } This will be rendered as: < div > < Descr title = \"Image 1\" class = \"pipen-report-table-image-descr\" > This is a description about the image. </ Descr > < Image src = \"placeholder.png\" class = \"pipen-report-table-image\" width = { 526 } height = { 360 } /> </ div > Component: tab Render a tab. Full configuration of a tab component: { \"kind\" : \"tab\" , \"label\" : \"label of the tab\" , # or use key `name` or `title` \"ui\" : \"flat\" , # The ui of the components under this tab \"contents\" : [ ... ] # The components to render under this tab using the `ui` } This will be rendered as a tuple of Tab and TabContent : < Tab label = \"label of the tab\" /> <!-- and --> < TabContent > < ui of the components under this tab using the ` ui ` /> </ TabContent > See also the Tabs component of carbon-components-svelte . Component: tag You can also directly use a tag ( <tag ... /> ) as a component. Full configuration of a tag component: { \"kind\" : \"tag\" , \"tag\" : \"tag-name\" , # The tag name # Other attributes passed to the tag } This will be rendered as: < tag-name ... /> Attention To build the report using the above filters, you need to import the components in the template files manually: < script > import { Descr , Image , DataTable } from \"$libs\" ; import { Accordion , AccordionItem , Tabs , Tab , TabContent } from \"$ccs\" ; // import more if needed, e.g InlineNotification, OrderedList, UnorderedList, ListItem, etc </ script > {{ job | render_job }} Registering new component renderer pipen-report allows you to register new component renderer. For example, you can register a new component renderer for my-component : from pipen_report.filters import register_component , _tag @register_component ( \"my-component\" , \"mycomp\" ) def _render_my_component ( args , job , level ): \"\"\"Render my-component Args: args should be a dict with the following keys: - kind: The kind of the component, \"my-component\" or \"mycomp\" in this case - arg1: ... # The arguments passed to the component - arg2: ... - ... job: The job object used to render the template level: The indent level of the component \"\"\" # Rendered as # <div>This is my component</div> return _tag ( \"div\" , slot = \"This is my component\" , _level = level ) When the above component renderer is registered, my-component can be used in the report.json file: { \"h1\" : { \"h2\" : { \"h3\" : { \"ui\" : [ { \"kind\" : \"my-component\" , \"arg1\" : \"value1\" , \"arg2\" : \"value2\" } ] } } } } Or in the dict passed to the render_component filter: {{ { \"kind\" : \"my-component\", \"arg1\": \"value1\", \"arg2\": \"value2\"} | render_component }} Registering new ui renderer ui is a layout of components, which defines how the set of components are rendered. pipen-report allows you to register new ui renderer. For example, you can register a new ui renderer for grid : from pipen_report.filters import register_ui , render_component , _tag @register_ui ( \"grid\" ) def _render_my_ui ( contents , job , level ): \"\"\"Render grid ui Args: contents: The contents of components to render job: The job object used to render the template level: The indent level of the components \"\"\" return _tag ( \"div\" , slot = \" \\n \" . join ( _tag ( \"div\" , slot = render_component ( c , job , 2 ), _level = 1 ) for c in contents ), _level = level , style = \"display: grid; grid-template-columns: repeat(2, auto); \" ) This will render a grid ui as: < div style = \"display: grid; grid-template-columns: repeat(2, auto); \" > < div > < Component1 /> </ div > < div > < Component2 /> </ div > </ div > When the above ui renderer is registered, grid can be used in the report.json file: { \"h1\" : { \"h2\" : { \"h3\" : { \"grid\" : [ { \"kind\" : \"<component>\" , ... }, { \"kind\" : \"<component>\" , ... } ] } } } } Or in the dict passed to the render_ui filter: {{ [ { \"kind\": \"<component>\", ... }, { \"kind\": \"<component>\", ... } ] | render_ui : \"grid\" }} You can also pass extra arguments to the ui renderer. In the above example, for example, we can pass the number of columns to the grid ui, by registering the renderer as: @register_ui ( \"grid\" ) def _render_my_ui ( contents , job , level , arg : str | None = None ): \"\"\"Render grid ui The `arg` should be the residual of the ui name after the first `:`. For example, `grid:3` will pass `arg=\"3\"` to the renderer. \"\"\" arg = arg or \"2\" ncol = int ( arg ) return _tag ( \"div\" , slot = \" \\n \" . join ( _tag ( \"div\" , slot = render_component ( c , job , 2 ), _level = 1 ) for c in contents ), _level = level , style = f \"display: grid; grid-template-columns: repeat( { ncol } , auto); \" )","title":"Filters for rendering"},{"location":"filters/#filters","text":"Filters are used in template rendering. They are defined in filters.py and can be used in the template files.","title":"Filters"},{"location":"filters/#datatable","text":"Read data from a file, using pandas.read_csv() and make it to json so js can handle it and render it with <DataTable /> Args: path (PathLike): The path to the data file. *args (Any): Additional positional arguments to pass to pandas.read_csv(). ncols (Union[int, Iterable], optional): Either the number of columns to select or an iterable of column indices or names. Defaults to None. nrows (Union[int, Iterable], optional): Either the number of rows to select or an iterable of row indices. Defaults to None. double_precision (int, optional): The precision for double numbers. See also pandas.DataFrame.to_json(). Defaults to 4. excluded (set, optional): A set of column names to exclude from the resulting DataFrame. Defaults to None. **kwargs (Any): Additional keyword arguments to pass to pandas.read_csv(). Note that sep is set to \"\\t\" instead of , by default. Returns: str : A JSON format of the data. Examples: < DataTable data = \"{{ '/path/to/data.tsv' | datatable: nrows=10) }}\" /> < DataTable data = \"{{ '/path/to/data.tsv' | datatable: nrows=10, excluded={'col1', 'col2'}) }}\" />","title":"datatable"},{"location":"filters/#render_job","text":"Generate the svelte components for a job. Args: job (Mapping[str, Any]): The job object used to render the template. report_file (str): Absolute path to a report file or relative to job.outdir h (int): The starting level of the headers Examples: A json should be defined at <job.outdir>/report.json for the report structure: { \"h1\" : { \"h2\" : { \"h3\" : { \"ui\" : [ { \"kind\" : \"datatable\" , \"src\" : \"data.tsv\" }, # more compo nents ] } } } } The h2 and h3 are optional. You can set them to #xxx to let pipen-report to ignore them. Same h2 s are also supported. You can use #<suffiex> to make them different. For example, Heading2#1 and Heading2#2 to have two h2 with the same name under the same h1 . For details of ui and components, see following sections.","title":"render_job"},{"location":"filters/#render_ui","text":"Render a set of components with a certain ui layout. In the report.json file, under h3 , you should specify a dict with ui keys, which defined a large set of components. Supported ui s are: flat : The components will be rendered sequentially. tabs : The components will be rendered as tabs. Each component should be with kind \"tab\" . If not specified, kind = \"tab\" will be added automatically. table_of_images : The components will be rendered as a table of images. Each component should be with kind \"table_image\" . If not specified, kind = \"image\" will be added automatically. You can specify the number of columns like table_of_images:3 . The default number of columns is 2. accordion : The components will be rendered as an accordion. Each component should be with kind \"accordion\" . If not specified, kind = \"accordion\" will be added automatically. This can also be used as a filter in the template files by passing a json object and the ui : Args: contents (List[Mapping[str, Any]]): The contents of components to render. ui (str): The ui layout to render. job (Mapping[str, Any]): The job object used to render the template. level (int): The indent level of the components. Defaults to 0.","title":"render_ui"},{"location":"filters/#ui-flat","text":"A flat ui will render the components sequentially. < Component1 /> < Component2 /> < Component3 /> <!-- ... -->","title":"UI: flat"},{"location":"filters/#ui-tabs","text":"A tabs ui will render the components as tabs. See also the Tabs component of carbon-components-svelte . < Tabs > < Tab label = \"Component1\" /> < Tab label = \"Component2\" /> < Tab title = \"Component3\" /> < svelte:fragment > < TabContent > < ui of Component1 /> </ TabContent > < TabContent > < ui of Component2 /> </ TabContent > < TabContent > < ui of Component3 /> </ TabContent > </ svelte:fragment > </ Tabs > See also Component: `tab for how each component is rendered.","title":"UI: tabs"},{"location":"filters/#ui-table_of_images","text":"A table_of_images ui will render the components as a table of images. < div class = \"pipen-report-table-of-images\" style = \"grid-template-columns: repeat(2, auto); \" > < div > <!-- A tab_image component --> < Descr title = \"Image 2\" class = \"pipen-report-table-image-descr\" > This is a description about the image. </ Descr > < Image src = \"placeholder.png\" class = \"pipen-report-table-image\" width = { 526 } height = { 360 } /> <!-- end of tab_image component --> </ div > < div > < Descr title = \"Image 3\" class = \"pipen-report-table-image-descr\" > This is a description about the image. </ Descr > < Image src = \"placeholder.png\" class = \"pipen-report-table-image\" width = { 526 } height = { 360 } /> </ div > </ div > See also Component: table_image for how each component is rendered.","title":"UI: table_of_images"},{"location":"filters/#ui-accordion","text":"A accordion ui will render the components as an accordion. See also the Accordion component of carbon-components-svelte . < Accordion > < AccordionItem title = \"title of Component1\" > < ui of Component1 /> </ AccordionItem > < AccordionItem title = \"title of Component2\" > < ui of Component2 /> </ AccordionItem > < AccordionItem title = \"title of Component3\" > < ui of Component3 /> </ AccordionItem > </ Accordion > See also Component: accordion for how each component is rendered.","title":"UI: accordion"},{"location":"filters/#render_component","text":"Each component of the ui should be rendered with this filter. Args: component (Mapping[str, Any]): The component to render. job (Mapping[str, Any]): The job object used to render the template. level (int): The indent level of the components. Defaults to 0.","title":"render_component"},{"location":"filters/#component-accordion","text":"Full configuration of an accordion item: { \"kind\" : \"accordion\" , # When under an `accordion` ui, this can be omitted \"title\" : \"title of the accordion\" , \"ui\" : \"flat\" , # The ui of the components under this accordion item \"contents\" : [ ... ] # The components to render under this accordion item using the `ui` } This will be rendered as: < AccordionItem title = \"title of the accordion\" > < ui of the components under this accordion item using the ` ui ` /> </ AccordionItem >","title":"Component: accordion"},{"location":"filters/#component-descr","text":"Full configuration of a descr component: { \"kind\" : \"descr\" , \"title\" : \"title of the descr\" , # or use key `name` \"content\" : \"The description content\" , # or use key `descr` } This will be rendered as: < Descr title = \"title of the descr\" > The description content </ Descr >","title":"Component: descr"},{"location":"filters/#component-error","text":"Full configuration of an error component: { \"kind\" : \"error\" , \"content\" : \"The error content\" , \"kind_\" : \"warning\" , # use the warning style by default # more props passed to InlineNotification } This will be rendered as: < InlineNotification kind = \"warning\" > The error content </ InlineNotification > See also the InlineNotification component of carbon-components-svelte .","title":"Component: error"},{"location":"filters/#component-list","text":"Render a list of items. Full configuration of a list component: { \"kind\" : \"list\" , \"items\" : [ \"item1\" , \"item2\" , \"item3\" , # ... ], \"ordered\" : False , # Whether to render an ordered list (OrderedList) } This will be rendered as: < UnorderedList > < ListItem > item1 </ ListItem > < ListItem > item2 </ ListItem > < ListItem > item3 </ ListItem > <!-- ... --> </ UnorderedList >","title":"Component: list"},{"location":"filters/#component-table","text":"Render a data table. Full configuration of a table component: { \"kind\" : \"table\" , # Arguments passed to pandas.read_csv() # See datatable filter for details # If path is not specified, `src` will be used \"data\" : {}, # The path to the data file # You can set to False, so that download the datafile is disabled # If so, you need to set path in `data` to let the datatable filter to read the data \"src\" : \"/path/to/data.tsv\" , # Other arguments passed to DataTable } This will be rendered as: < DataTable data = { [ ... ] } /> See also the DataTable component of carbon-components-svelte .","title":"Component: table"},{"location":"filters/#component-image","text":"Render an image. Full configuration of an image component: { \"kind\" : \"image\" , \"src\" : \"/path/to/image.png\" , # The path to the image file \"width\" : 526 , # The width of the image \"height\" : 360 , # The height of the image # Other arguments passed to Image } This will be rendered as: < Image src = \"/path/to/image.png\" width = { 526 } height = { 360 } /> The width and height are optional. If not specified, the size will be obtained from the image file using pillow . This is useful for the loading placeholder to have the same size as the image.","title":"Component: image"},{"location":"filters/#component-table_image","text":"Render a table of images. Full configuration of a table_image component: { \"kind\" : \"table_image\" , \"src\" : \"/path/to/image.png\" , # The path to the image file \"name\" : \"Image 1\" , # The name of the image \"descr\" : \"This is a description about the image.\" , # The description of the image # Other arguments passed to Image } This will be rendered as: < div > < Descr title = \"Image 1\" class = \"pipen-report-table-image-descr\" > This is a description about the image. </ Descr > < Image src = \"placeholder.png\" class = \"pipen-report-table-image\" width = { 526 } height = { 360 } /> </ div >","title":"Component: table_image"},{"location":"filters/#component-tab","text":"Render a tab. Full configuration of a tab component: { \"kind\" : \"tab\" , \"label\" : \"label of the tab\" , # or use key `name` or `title` \"ui\" : \"flat\" , # The ui of the components under this tab \"contents\" : [ ... ] # The components to render under this tab using the `ui` } This will be rendered as a tuple of Tab and TabContent : < Tab label = \"label of the tab\" /> <!-- and --> < TabContent > < ui of the components under this tab using the ` ui ` /> </ TabContent > See also the Tabs component of carbon-components-svelte .","title":"Component: tab"},{"location":"filters/#component-tag","text":"You can also directly use a tag ( <tag ... /> ) as a component. Full configuration of a tag component: { \"kind\" : \"tag\" , \"tag\" : \"tag-name\" , # The tag name # Other attributes passed to the tag } This will be rendered as: < tag-name ... /> Attention To build the report using the above filters, you need to import the components in the template files manually: < script > import { Descr , Image , DataTable } from \"$libs\" ; import { Accordion , AccordionItem , Tabs , Tab , TabContent } from \"$ccs\" ; // import more if needed, e.g InlineNotification, OrderedList, UnorderedList, ListItem, etc </ script > {{ job | render_job }}","title":"Component: tag"},{"location":"filters/#registering-new-component-renderer","text":"pipen-report allows you to register new component renderer. For example, you can register a new component renderer for my-component : from pipen_report.filters import register_component , _tag @register_component ( \"my-component\" , \"mycomp\" ) def _render_my_component ( args , job , level ): \"\"\"Render my-component Args: args should be a dict with the following keys: - kind: The kind of the component, \"my-component\" or \"mycomp\" in this case - arg1: ... # The arguments passed to the component - arg2: ... - ... job: The job object used to render the template level: The indent level of the component \"\"\" # Rendered as # <div>This is my component</div> return _tag ( \"div\" , slot = \"This is my component\" , _level = level ) When the above component renderer is registered, my-component can be used in the report.json file: { \"h1\" : { \"h2\" : { \"h3\" : { \"ui\" : [ { \"kind\" : \"my-component\" , \"arg1\" : \"value1\" , \"arg2\" : \"value2\" } ] } } } } Or in the dict passed to the render_component filter: {{ { \"kind\" : \"my-component\", \"arg1\": \"value1\", \"arg2\": \"value2\"} | render_component }}","title":"Registering new component renderer"},{"location":"filters/#registering-new-ui-renderer","text":"ui is a layout of components, which defines how the set of components are rendered. pipen-report allows you to register new ui renderer. For example, you can register a new ui renderer for grid : from pipen_report.filters import register_ui , render_component , _tag @register_ui ( \"grid\" ) def _render_my_ui ( contents , job , level ): \"\"\"Render grid ui Args: contents: The contents of components to render job: The job object used to render the template level: The indent level of the components \"\"\" return _tag ( \"div\" , slot = \" \\n \" . join ( _tag ( \"div\" , slot = render_component ( c , job , 2 ), _level = 1 ) for c in contents ), _level = level , style = \"display: grid; grid-template-columns: repeat(2, auto); \" ) This will render a grid ui as: < div style = \"display: grid; grid-template-columns: repeat(2, auto); \" > < div > < Component1 /> </ div > < div > < Component2 /> </ div > </ div > When the above ui renderer is registered, grid can be used in the report.json file: { \"h1\" : { \"h2\" : { \"h3\" : { \"grid\" : [ { \"kind\" : \"<component>\" , ... }, { \"kind\" : \"<component>\" , ... } ] } } } } Or in the dict passed to the render_ui filter: {{ [ { \"kind\": \"<component>\", ... }, { \"kind\": \"<component>\", ... } ] | render_ui : \"grid\" }} You can also pass extra arguments to the ui renderer. In the above example, for example, we can pass the number of columns to the grid ui, by registering the renderer as: @register_ui ( \"grid\" ) def _render_my_ui ( contents , job , level , arg : str | None = None ): \"\"\"Render grid ui The `arg` should be the residual of the ui name after the first `:`. For example, `grid:3` will pass `arg=\"3\"` to the renderer. \"\"\" arg = arg or \"2\" ncol = int ( arg ) return _tag ( \"div\" , slot = \" \\n \" . join ( _tag ( \"div\" , slot = render_component ( c , job , 2 ), _level = 1 ) for c in contents ), _level = level , style = f \"display: grid; grid-template-columns: repeat( { ncol } , auto); \" )","title":"Registering new ui renderer"},{"location":"folder-structure/","text":"Folder structure Output directory structure The reports (html files, assets, built js files, etc) will be saved at <pipeline.outdir>/REPORTS You should export the whole output directory ( <pipeline.outdir> ) and refer the index of the report here: <pipeline.outdir>/REPROTS/index.html Frontend working directory structure The working directory is located at <pipeline_workdir>/<pipeline_name>/.report-workdir The subdirectoies and files are: node_modules The frontend dependencies, should be a symbolic link to the global node_modules package.json The packages defining the dependencies, linked to the one inside the package pipen-report.log The log files public The public files and built files. Linked to <pipeline.outdir>/REPORTS public/data Usually, when the files are exported from the process, they will be saved at <pipeline.outdir> , otherwise <pipeline-workdir>/<pipeline-name>/<proc-name>/<job-index>/output . For those exported files, we can make relative path \"..\" to link them, however, for those not exported, there is no way for us to link them. So we make a copy of them in the public/data directory, and change the original link to the copied one. rollup.config.js The rollup configuration file to compile the reports, include the index page. src The source files used to compile.","title":"Folder structure"},{"location":"folder-structure/#folder-structure","text":"","title":"Folder structure"},{"location":"folder-structure/#output-directory-structure","text":"The reports (html files, assets, built js files, etc) will be saved at <pipeline.outdir>/REPORTS You should export the whole output directory ( <pipeline.outdir> ) and refer the index of the report here: <pipeline.outdir>/REPROTS/index.html","title":"Output directory structure"},{"location":"folder-structure/#frontend-working-directory-structure","text":"The working directory is located at <pipeline_workdir>/<pipeline_name>/.report-workdir The subdirectoies and files are: node_modules The frontend dependencies, should be a symbolic link to the global node_modules package.json The packages defining the dependencies, linked to the one inside the package pipen-report.log The log files public The public files and built files. Linked to <pipeline.outdir>/REPORTS public/data Usually, when the files are exported from the process, they will be saved at <pipeline.outdir> , otherwise <pipeline-workdir>/<pipeline-name>/<proc-name>/<job-index>/output . For those exported files, we can make relative path \"..\" to link them, however, for those not exported, there is no way for us to link them. So we make a copy of them in the public/data directory, and change the original link to the copied one. rollup.config.js The rollup configuration file to compile the reports, include the index page. src The source files used to compile.","title":"Frontend working directory structure"},{"location":"rendering/","text":"Rendering python-end rendering A report template is first rendered with pipeline/process template engine ( liquid and jinja2 supoorted by default), which enables us to use process and job attributes in the template (ie. paths to input/output). The avaiable data to render the template: Data Meaning proc The process object. You can access its attributes by proc.xxx envs A shortcut to proc.envs , the arguments of the process jobs Jobs of the process. We can access index , metadir , outdir , stdout_file , stderr_file , in (alias in_ ) and out for each job job / job0 A shortcut to jobs[0] , useful for single-job processes frontend rendering After python-end rendering, the template is sent to svelte for frontend rendering. Any valid svelte file is a valid report template. You can even use a plain HTML elements in the template.","title":"Template rendering"},{"location":"rendering/#rendering","text":"","title":"Rendering"},{"location":"rendering/#python-end-rendering","text":"A report template is first rendered with pipeline/process template engine ( liquid and jinja2 supoorted by default), which enables us to use process and job attributes in the template (ie. paths to input/output). The avaiable data to render the template: Data Meaning proc The process object. You can access its attributes by proc.xxx envs A shortcut to proc.envs , the arguments of the process jobs Jobs of the process. We can access index , metadir , outdir , stdout_file , stderr_file , in (alias in_ ) and out for each job job / job0 A shortcut to jobs[0] , useful for single-job processes","title":"python-end rendering"},{"location":"rendering/#frontend-rendering","text":"After python-end rendering, the template is sent to svelte for frontend rendering. Any valid svelte file is a valid report template. You can even use a plain HTML elements in the template.","title":"frontend rendering"},{"location":"writing/","text":"Writing reports Using carbon-components-svelte components carbon-components-svelte is supported by default. So you can use any components from the package. See their documentations . To use a components from carbon-components-svelte : < script > import { Button } from 'carbon-components-svelte`; // or use a shortcut import { Button } from ' $ccs ' ; </ script > < Button /> Using builtin components There are also builting components to enhance some functions. To use a builtin component: import { Image } from '../../components' ; // or use a shortcut import { Image } from '$libs' ; import { Image } from '$components' ; Thanks to the rollup-alias plugin, you can use the following aliases: { entries : [ { find : '$components' , replacement : '../../components' }, { find : '$component' , replacement : '../../components' }, { find : '$layouts' , replacement : '../../layouts' }, { find : '$layout' , replacement : '../../layouts' }, { find : '$libs' , replacement : '../../components' }, { find : '$lib' , replacement : '../../components' }, { find : '$extlibs' , replacement : '../../extlibs/{{extlibs.split(\"/\")[-1]}}' }, { find : '$ccs' , replacement : 'carbon-components-svelte' }, ] } DataTable An enhanced DataTable from carbon-components-svelte/DataTable . Additional features: Paginations enabled by default, with properties: page : set current page pageSize : set current page size pageSizes : allowed page sizes to set Sorting enabled by default (with sortable = true ) zebra set to true by default (with zebra = true ) Added a frame around the table, so tables and images can be aligned (better looking) You can set frameProps to null / undefined to disable it. Implemented download of data in the table or the entire data file if property src is set. Implemented search Allowing a single data property to pass data instead of headers and rows data is just rows , but headers will be inferred from it. Tip A datatable filter is added for python to render the template, so that we can read the data from a data file. < script > import { DataTable } from \"$libs\" ; </ script > < DataTable src = \"{{job.out.outfile}}\" data = { {{ job . out . outfile | datafile : sep = \"\\t\" }} } /> All other arguments will be passed to pandas.read_csv() except doule_precision , which will be passed to pandas.DataFrame.to_json() to control the precision of the numbers. Image An enhanced ImageLoader from carbon-components-svelte/ImageLoader Additional features: Similarly, a frame is added and enabled by default. To disable it, set frameProps to null / undefined Removed the width 100% style, added a class, and set the default width 45%. Added a modal when clicking on the image, the original dimension of the image is shown. Added \"open in new window\" for the image in the modal. Added a toolbar on the top-left corner of the image, with buttons to download the resources related to this image (i.e. the high-resolution image, the data file, etc.) To provide the information about the resources, use the data property. It should be: a list of objects or a single object, each object should have a src , tip and a icon property, where src is the path to the resource, tip is the tooltip, and icon is the icon to show. By default, the icon is auto, which will be inferred from the extension of the src . Available icons: DocumentPdf : Associated extensions: pdf ChartLineData : Associated extensions: html Png : Associated extensions: png Jpg : Associated extensions: jpg , jpeg Gif : Associated extensions: gif Svg : Associated extensions: svg Tif : Associated extensions: tif , tiff Archive : Associated extensions: zip , tar , gz , bz2 , xz , 7z , rar DatabaseElastic : Associated extensions: eps Data / DataVolume : No associated extensions, can be used for user specification IbmWatsonxCodeAssistantForZRefactor / Code : No associated extensions, can be used for user specification VideoPlayer : Associated extensions: mp4 , avi , mov , mkv , webm Image : No associated extensions, can be used for user specification DocumentDownload : Default icon a list of strings or a single string, each string will be the src and tip will be inferred from the src . The icon will be auto . Descr A component to show a description. Properties: title : the title of the description The content of the description is passed to the slot . Iframe An iframe component to embed an external page. Properties: src : the url of the page to embed width : the width of the iframe height : the height of the iframe title : the title of the iframe frameborder : the border of the iframe ref : the reference of the iframe (HTMLElement) resize : The way of resizing the iframe. Should be a CSS value of resize . Default is none . containerClass : The class of the container of the iframe. Default is \"\" . Plotly A component to show a plotly plot. The plot must be saved as an html file. Properties: frameProps : the properties of the frame around the plot. Default is {\"class\": \"pipen-report-plotly-frame\"} . src : the path to the plotly html file. title : the title of the plot (iframe) width : the width of the plot (iframe) height : the height of the plot (iframe) Markdown A markdown tag is processed at server side by python, which is not implemented as a svelte component. So you don't need to import it in script tag. Everything inside the <Markdown> is passed to markdown.markdown() from python Markdown package to convert to html. Advanced usage Using self-defined components Say you have a set of components that you want to use in all your reports. You can specify the path to the directory containing the components in report_extlibs by either pipen report config --extlibs <path> or pipeline.config.plugin_opts.report_extlibs = <path> . Then you can import the components from the path you specified. < script > import { MyComponent } from '$extlibs/MyComponent.svelte' ; </ script > You can write your own components based on carbon-components-svelte components. Note that the shortcut $ccs is not available in the components you write. You have to use 'carbon-components-svelte'. Tip You can also use the aliases/shortcuts for modules in your components. See Using builtin components for the list of aliases. For those relative paths, you have to pay attention to the path of your components. The extlibs are symbolically linked to the ~/.pipen/Pipeline/.report-workdir/src/extlibs/{{extlibs.split(\"/\")[-1]}} directory. So you have to use the relative path from the ~/.pipen/Pipeline/.report-workdir/src/extlibs/{{extlibs.split(\"/\")[-1]}} directory. So it is Okay to use the aliases/shortcuts when your components are directly under the extlibs directory. If your components are in a subdirectory, you have to go up more levels for the components. For example, let's say your component is in <extlibs>/components/MyComponent.svelte , then you have to import it like this: < script > // instead of using $libs import { Image } from '../../../components' ; </ script > Using other svelte components Can you use other svelte components? Yes. But you have to do it for every pipeline run. And you have to set report_nobuild to True . How? In the working directory ( ~/.pipen/Pipeline/.report-workdir/ ), remove node_modules and make a copy of package.json instead of a symbolinc link. This is important, you may not want to pollute the global one. For example, if you want to use smelte Then run npm install and npm install -D smelte In your template: < script > import { Chip } from \"smelte\" ; let closed = false ; let clicked = false ; </ script > < Chip icon = \"face\" removable selectable on : close = {() => closed = true } on : click = {() => clicked = true } > test </ Chip > Finally, run npm build to buld your reports Converting paths to urls When we write a report template, we usually specify the path on the file system to the resources. But when we want to deploy the report, we need to convert the paths to urls, so that the resources can be accessed by the browser. Here is the rule to convert the paths to urls: If the resource is a file from process results, which are usually stored in one-level up from the REPORTS directory, the path should be converted to a relative path to the REPORTS directory. For example, if the REPORTS directory is /path/to/REPORTS , the path to the resource is /path/to/someproc/image.png , then the converted path should be ../someproc/image.png . If the resource is a file from process results, but the process does not exports the results to the output directory (i.e. some intermediate processes), the resource will be copied to /path/to/REPORTS/data directory. The converted path should be data/image.<id>.png , where <id> is associated with the raw resource path. A relative path or a URL to the resource will be kept as is. When we are using other, self-defined or external components, we should register the tag and the property with the path for conversion. For example, if we have a component MyComponent that has a property src that is a path to a resource, we should register the tag and the property with the path for conversion, using the report_relpath_tags configuration. from pipen import Pipen class Pipeline ( Pipen ): plugin_opts = { \"report_relpath_tags\" : { \"MyComponent\" : \"src\" , \"MyComponent2\" : [ \"src\" , \"src2\" ], # multiple properties } } Already registered tags are: { \"a\" : \"href\" , \"embed\" : \"src\" , \"img\" : \"src\" , \"Link\" : \"href\" , \"Image\" : ( \"src\" , \"download\" ), \"ImageLoader\" : \"src\" , \"DataTable\" : \"src\" , \"iframe\" : \"src\" , \"Iframe\" : \"src\" , \"Plotly\" : \"src\" , \"Download\" : \"href\" , }","title":"Writing report templates"},{"location":"writing/#writing-reports","text":"","title":"Writing reports"},{"location":"writing/#using-carbon-components-svelte-components","text":"carbon-components-svelte is supported by default. So you can use any components from the package. See their documentations . To use a components from carbon-components-svelte : < script > import { Button } from 'carbon-components-svelte`; // or use a shortcut import { Button } from ' $ccs ' ; </ script > < Button />","title":"Using carbon-components-svelte components"},{"location":"writing/#using-builtin-components","text":"There are also builting components to enhance some functions. To use a builtin component: import { Image } from '../../components' ; // or use a shortcut import { Image } from '$libs' ; import { Image } from '$components' ; Thanks to the rollup-alias plugin, you can use the following aliases: { entries : [ { find : '$components' , replacement : '../../components' }, { find : '$component' , replacement : '../../components' }, { find : '$layouts' , replacement : '../../layouts' }, { find : '$layout' , replacement : '../../layouts' }, { find : '$libs' , replacement : '../../components' }, { find : '$lib' , replacement : '../../components' }, { find : '$extlibs' , replacement : '../../extlibs/{{extlibs.split(\"/\")[-1]}}' }, { find : '$ccs' , replacement : 'carbon-components-svelte' }, ] }","title":"Using builtin components"},{"location":"writing/#datatable","text":"An enhanced DataTable from carbon-components-svelte/DataTable . Additional features: Paginations enabled by default, with properties: page : set current page pageSize : set current page size pageSizes : allowed page sizes to set Sorting enabled by default (with sortable = true ) zebra set to true by default (with zebra = true ) Added a frame around the table, so tables and images can be aligned (better looking) You can set frameProps to null / undefined to disable it. Implemented download of data in the table or the entire data file if property src is set. Implemented search Allowing a single data property to pass data instead of headers and rows data is just rows , but headers will be inferred from it. Tip A datatable filter is added for python to render the template, so that we can read the data from a data file. < script > import { DataTable } from \"$libs\" ; </ script > < DataTable src = \"{{job.out.outfile}}\" data = { {{ job . out . outfile | datafile : sep = \"\\t\" }} } /> All other arguments will be passed to pandas.read_csv() except doule_precision , which will be passed to pandas.DataFrame.to_json() to control the precision of the numbers.","title":"DataTable"},{"location":"writing/#image","text":"An enhanced ImageLoader from carbon-components-svelte/ImageLoader Additional features: Similarly, a frame is added and enabled by default. To disable it, set frameProps to null / undefined Removed the width 100% style, added a class, and set the default width 45%. Added a modal when clicking on the image, the original dimension of the image is shown. Added \"open in new window\" for the image in the modal. Added a toolbar on the top-left corner of the image, with buttons to download the resources related to this image (i.e. the high-resolution image, the data file, etc.) To provide the information about the resources, use the data property. It should be: a list of objects or a single object, each object should have a src , tip and a icon property, where src is the path to the resource, tip is the tooltip, and icon is the icon to show. By default, the icon is auto, which will be inferred from the extension of the src . Available icons: DocumentPdf : Associated extensions: pdf ChartLineData : Associated extensions: html Png : Associated extensions: png Jpg : Associated extensions: jpg , jpeg Gif : Associated extensions: gif Svg : Associated extensions: svg Tif : Associated extensions: tif , tiff Archive : Associated extensions: zip , tar , gz , bz2 , xz , 7z , rar DatabaseElastic : Associated extensions: eps Data / DataVolume : No associated extensions, can be used for user specification IbmWatsonxCodeAssistantForZRefactor / Code : No associated extensions, can be used for user specification VideoPlayer : Associated extensions: mp4 , avi , mov , mkv , webm Image : No associated extensions, can be used for user specification DocumentDownload : Default icon a list of strings or a single string, each string will be the src and tip will be inferred from the src . The icon will be auto .","title":"Image"},{"location":"writing/#descr","text":"A component to show a description. Properties: title : the title of the description The content of the description is passed to the slot .","title":"Descr"},{"location":"writing/#iframe","text":"An iframe component to embed an external page. Properties: src : the url of the page to embed width : the width of the iframe height : the height of the iframe title : the title of the iframe frameborder : the border of the iframe ref : the reference of the iframe (HTMLElement) resize : The way of resizing the iframe. Should be a CSS value of resize . Default is none . containerClass : The class of the container of the iframe. Default is \"\" .","title":"Iframe"},{"location":"writing/#plotly","text":"A component to show a plotly plot. The plot must be saved as an html file. Properties: frameProps : the properties of the frame around the plot. Default is {\"class\": \"pipen-report-plotly-frame\"} . src : the path to the plotly html file. title : the title of the plot (iframe) width : the width of the plot (iframe) height : the height of the plot (iframe)","title":"Plotly"},{"location":"writing/#markdown","text":"A markdown tag is processed at server side by python, which is not implemented as a svelte component. So you don't need to import it in script tag. Everything inside the <Markdown> is passed to markdown.markdown() from python Markdown package to convert to html.","title":"Markdown"},{"location":"writing/#advanced-usage","text":"","title":"Advanced usage"},{"location":"writing/#using-self-defined-components","text":"Say you have a set of components that you want to use in all your reports. You can specify the path to the directory containing the components in report_extlibs by either pipen report config --extlibs <path> or pipeline.config.plugin_opts.report_extlibs = <path> . Then you can import the components from the path you specified. < script > import { MyComponent } from '$extlibs/MyComponent.svelte' ; </ script > You can write your own components based on carbon-components-svelte components. Note that the shortcut $ccs is not available in the components you write. You have to use 'carbon-components-svelte'. Tip You can also use the aliases/shortcuts for modules in your components. See Using builtin components for the list of aliases. For those relative paths, you have to pay attention to the path of your components. The extlibs are symbolically linked to the ~/.pipen/Pipeline/.report-workdir/src/extlibs/{{extlibs.split(\"/\")[-1]}} directory. So you have to use the relative path from the ~/.pipen/Pipeline/.report-workdir/src/extlibs/{{extlibs.split(\"/\")[-1]}} directory. So it is Okay to use the aliases/shortcuts when your components are directly under the extlibs directory. If your components are in a subdirectory, you have to go up more levels for the components. For example, let's say your component is in <extlibs>/components/MyComponent.svelte , then you have to import it like this: < script > // instead of using $libs import { Image } from '../../../components' ; </ script >","title":"Using self-defined components"},{"location":"writing/#using-other-svelte-components","text":"Can you use other svelte components? Yes. But you have to do it for every pipeline run. And you have to set report_nobuild to True . How? In the working directory ( ~/.pipen/Pipeline/.report-workdir/ ), remove node_modules and make a copy of package.json instead of a symbolinc link. This is important, you may not want to pollute the global one. For example, if you want to use smelte Then run npm install and npm install -D smelte In your template: < script > import { Chip } from \"smelte\" ; let closed = false ; let clicked = false ; </ script > < Chip icon = \"face\" removable selectable on : close = {() => closed = true } on : click = {() => clicked = true } > test </ Chip > Finally, run npm build to buld your reports","title":"Using other svelte components"},{"location":"writing/#converting-paths-to-urls","text":"When we write a report template, we usually specify the path on the file system to the resources. But when we want to deploy the report, we need to convert the paths to urls, so that the resources can be accessed by the browser. Here is the rule to convert the paths to urls: If the resource is a file from process results, which are usually stored in one-level up from the REPORTS directory, the path should be converted to a relative path to the REPORTS directory. For example, if the REPORTS directory is /path/to/REPORTS , the path to the resource is /path/to/someproc/image.png , then the converted path should be ../someproc/image.png . If the resource is a file from process results, but the process does not exports the results to the output directory (i.e. some intermediate processes), the resource will be copied to /path/to/REPORTS/data directory. The converted path should be data/image.<id>.png , where <id> is associated with the raw resource path. A relative path or a URL to the resource will be kept as is. When we are using other, self-defined or external components, we should register the tag and the property with the path for conversion. For example, if we have a component MyComponent that has a property src that is a path to a resource, we should register the tag and the property with the path for conversion, using the report_relpath_tags configuration. from pipen import Pipen class Pipeline ( Pipen ): plugin_opts = { \"report_relpath_tags\" : { \"MyComponent\" : \"src\" , \"MyComponent2\" : [ \"src\" , \"src2\" ], # multiple properties } } Already registered tags are: { \"a\" : \"href\" , \"embed\" : \"src\" , \"img\" : \"src\" , \"Link\" : \"href\" , \"Image\" : ( \"src\" , \"download\" ), \"ImageLoader\" : \"src\" , \"DataTable\" : \"src\" , \"iframe\" : \"src\" , \"Iframe\" : \"src\" , \"Plotly\" : \"src\" , \"Download\" : \"href\" , }","title":"Converting paths to urls"},{"location":"api/pipen_report.cli/","text":"module pipen_report . cli </> Provide a command line interface for the pipen_report plugin Classes PipenCliReport \u2014 CLI utility for pipen-report </> class pipen_report.cli . PipenCliReport ( parser , subparser ) </> Bases pipen.cli._hooks.CLIPlugin CLI utility for pipen-report Methods exec_command ( args ) \u2014 Execute the command </> parse_args ( known_parsed , unparsed_argv ) (Namespace) \u2014 Define arguments for the command </> method parse_args ( known_parsed , unparsed_argv ) \u2192 Namespace </> Define arguments for the command method exec_command ( args ) </> Execute the command","title":"pipen_report.cli"},{"location":"api/pipen_report.cli/#pipen_reportcli","text":"</> Provide a command line interface for the pipen_report plugin Classes PipenCliReport \u2014 CLI utility for pipen-report </> class","title":"pipen_report.cli"},{"location":"api/pipen_report.cli/#pipen_reportclipipenclireport","text":"</> Bases pipen.cli._hooks.CLIPlugin CLI utility for pipen-report Methods exec_command ( args ) \u2014 Execute the command </> parse_args ( known_parsed , unparsed_argv ) (Namespace) \u2014 Define arguments for the command </> method","title":"pipen_report.cli.PipenCliReport"},{"location":"api/pipen_report.cli/#pipencli_hooksclipluginparse_args","text":"</> Define arguments for the command method","title":"pipen.cli._hooks.CLIPlugin.parse_args"},{"location":"api/pipen_report.cli/#pipen_reportclipipenclireportexec_command","text":"</> Execute the command","title":"pipen_report.cli.PipenCliReport.exec_command"},{"location":"api/pipen_report.filters/","text":"module pipen_report . filters </> Filters for pipen-report This module contains the filters for pipen-report. The filters are used in the report template to render the report. Functions datatable ( path , *args , ncols , nrows , double_precision , excluded , **kwargs ) (str) \u2014 Read data from a file, using pandas.read_csv() and make it to json sojs can handle it and render it with </> register_component ( kind , *aliases ) (Callable) \u2014 Register a component renderer </> register_ui ( kind , *aliases ) (Callable) \u2014 Register a UI renderer </> render_component ( component , job , level ) (str) \u2014 Render the content based on its kind. </> render_job ( job , report_file , h ) (str) \u2014 Generate a report template from a report json file </> render_ui ( contents , ui , job , level ) (str) \u2014 Render a ui </> function pipen_report.filters . datatable ( path , *args , ncols=None , nrows=None , double_precision=4 , excluded=None , **kwargs ) </> Read data from a file, using pandas.read_csv() and make it to json sojs can handle it and render it with Parameters path (PathLike) \u2014 The path to the data file. *args (Any) \u2014 Additional positional arguments to pass to pandas.read_csv(). ncols (Union[int, Iterable], optional) \u2014 Either the number of columns toselect or an iterable of column indices or names. Defaults to None. nrows (Union[int, Iterable], optional) \u2014 Either the number of rows to selector an iterable of row indices. Defaults to None. double_precision (int, optional) \u2014 The precision for double numbers.See also pandas.DataFrame.to_json(). Defaults to 4. excluded (set, optional) \u2014 A set of column names to exclude from the resultingDataFrame. Defaults to None. **kwargs (Any) \u2014 Additional keyword arguments to pass to pandas.read_csv(). Returns (str) A JSON format of the data. function pipen_report.filters . render_component ( component , job=None , level=0 ) </> Render the content based on its kind. Parameters component (Any) \u2014 The content to be rendered. job (Mapping[str, Any]) \u2014 The job information. level (int) \u2014 The level of the content. Returns (str) The rendered content. Raises ValueError \u2014 If the kind of component in toc is unknown. function pipen_report.filters . register_component ( kind , *aliases ) </> Register a component renderer Parameters kind (str) \u2014 The kind of component to register. *aliases (str) \u2014 The aliases of the kind. Returns (Callable) The decorator to register the component renderer. function pipen_report.filters . render_ui ( contents , ui , job=None , level=0 ) </> Render a ui Parameters contents (List[Mapping[str, Any]]) \u2014 The contents to render in the UI. ui (str) \u2014 The type of UI to render.Allowed values are \"flat\", \"table_of_images\", \"accordion\", and \"tabs\". job (Mapping[str, Any], optional) \u2014 The job information. Defaults to None. level (int, optional) \u2014 The level of the UI. Defaults to 0. Returns (str) The rendered UI as a string. Raises ValueError \u2014 If the provided UI type is not one of the allowed values. function pipen_report.filters . register_ui ( kind , *aliases ) </> Register a UI renderer Parameters kind (str) \u2014 The kind of UI to register. *aliases (str) \u2014 The aliases of the kind. Returns (Callable) The decorator to register the UI renderer. function pipen_report.filters . render_job ( job , report_file='report.json' , h=1 ) </> Generate a report template from a report json file Parameters job (Mapping) \u2014 The job data that can be used to render the template report_file (str, optional) \u2014 Absolute path to a report file or relative to job.outdir h (int, optional) \u2014 The starting level of the headers Returns (str) The generated report","title":"pipen_report.filters"},{"location":"api/pipen_report.filters/#pipen_reportfilters","text":"</> Filters for pipen-report This module contains the filters for pipen-report. The filters are used in the report template to render the report. Functions datatable ( path , *args , ncols , nrows , double_precision , excluded , **kwargs ) (str) \u2014 Read data from a file, using pandas.read_csv() and make it to json sojs can handle it and render it with </> register_component ( kind , *aliases ) (Callable) \u2014 Register a component renderer </> register_ui ( kind , *aliases ) (Callable) \u2014 Register a UI renderer </> render_component ( component , job , level ) (str) \u2014 Render the content based on its kind. </> render_job ( job , report_file , h ) (str) \u2014 Generate a report template from a report json file </> render_ui ( contents , ui , job , level ) (str) \u2014 Render a ui </> function","title":"pipen_report.filters"},{"location":"api/pipen_report.filters/#pipen_reportfiltersdatatable","text":"</> Read data from a file, using pandas.read_csv() and make it to json sojs can handle it and render it with Parameters path (PathLike) \u2014 The path to the data file. *args (Any) \u2014 Additional positional arguments to pass to pandas.read_csv(). ncols (Union[int, Iterable], optional) \u2014 Either the number of columns toselect or an iterable of column indices or names. Defaults to None. nrows (Union[int, Iterable], optional) \u2014 Either the number of rows to selector an iterable of row indices. Defaults to None. double_precision (int, optional) \u2014 The precision for double numbers.See also pandas.DataFrame.to_json(). Defaults to 4. excluded (set, optional) \u2014 A set of column names to exclude from the resultingDataFrame. Defaults to None. **kwargs (Any) \u2014 Additional keyword arguments to pass to pandas.read_csv(). Returns (str) A JSON format of the data. function","title":"pipen_report.filters.datatable"},{"location":"api/pipen_report.filters/#pipen_reportfiltersrender_component","text":"</> Render the content based on its kind. Parameters component (Any) \u2014 The content to be rendered. job (Mapping[str, Any]) \u2014 The job information. level (int) \u2014 The level of the content. Returns (str) The rendered content. Raises ValueError \u2014 If the kind of component in toc is unknown. function","title":"pipen_report.filters.render_component"},{"location":"api/pipen_report.filters/#pipen_reportfiltersregister_component","text":"</> Register a component renderer Parameters kind (str) \u2014 The kind of component to register. *aliases (str) \u2014 The aliases of the kind. Returns (Callable) The decorator to register the component renderer. function","title":"pipen_report.filters.register_component"},{"location":"api/pipen_report.filters/#pipen_reportfiltersrender_ui","text":"</> Render a ui Parameters contents (List[Mapping[str, Any]]) \u2014 The contents to render in the UI. ui (str) \u2014 The type of UI to render.Allowed values are \"flat\", \"table_of_images\", \"accordion\", and \"tabs\". job (Mapping[str, Any], optional) \u2014 The job information. Defaults to None. level (int, optional) \u2014 The level of the UI. Defaults to 0. Returns (str) The rendered UI as a string. Raises ValueError \u2014 If the provided UI type is not one of the allowed values. function","title":"pipen_report.filters.render_ui"},{"location":"api/pipen_report.filters/#pipen_reportfiltersregister_ui","text":"</> Register a UI renderer Parameters kind (str) \u2014 The kind of UI to register. *aliases (str) \u2014 The aliases of the kind. Returns (Callable) The decorator to register the UI renderer. function","title":"pipen_report.filters.register_ui"},{"location":"api/pipen_report.filters/#pipen_reportfiltersrender_job","text":"</> Generate a report template from a report json file Parameters job (Mapping) \u2014 The job data that can be used to render the template report_file (str, optional) \u2014 Absolute path to a report file or relative to job.outdir h (int, optional) \u2014 The starting level of the headers Returns (str) The generated report","title":"pipen_report.filters.render_job"},{"location":"api/pipen_report/","text":"package pipen_report </> Report generation system for pipen module pipen_report . report_plugin </> Report generation system for pipen Classes PipenReport \u2014 Report plugin for pipen </> module pipen_report . cli </> Provide a command line interface for the pipen_report plugin Classes PipenCliReport \u2014 CLI utility for pipen-report </> module pipen_report . filters </> Filters for pipen-report This module contains the filters for pipen-report. The filters are used in the report template to render the report. Functions datatable ( path , *args , ncols , nrows , double_precision , excluded , **kwargs ) (str) \u2014 Read data from a file, using pandas.read_csv() and make it to json sojs can handle it and render it with </> register_component ( kind , *aliases ) (Callable) \u2014 Register a component renderer </> register_ui ( kind , *aliases ) (Callable) \u2014 Register a UI renderer </> render_component ( component , job , level ) (str) \u2014 Render the content based on its kind. </> render_job ( job , report_file , h ) (str) \u2014 Generate a report template from a report json file </> render_ui ( contents , ui , job , level ) (str) \u2014 Render a ui </> module pipen_report . versions </> Provides pipen and pipen-report versions module pipen_report . preprocess </> Provides preprocess Attributes TAG_ATTR_RE \u2014 ,re.VERBOSE | re.DOTALL, ) def _preprocess_slash_h( source: str, index: int, page: int, kind: str, text: str | None = None, ) -> Tuple[str, Mapping[str, Any]]: \"\"\"Preprocess headings (h1 or h2 tag) adding anchor links Add an anchor link after the tag and produce the toc dict For example, if the source is <h1>Title 1</h1> , the output will be <h1>Title 1</h1><a id=\"prt-h1-1-title-1\" class=\"pipen-report-toc-anchor\"> </a> Args: text: The string repr of the tag (e.g <h1>Title 1</h1> ) index: The index of this kind of heading in the document page: Which page are we on? kind: h1 or h2 Functions preprocess ( text , basedir , toc_switch , paging , relpath_tags , logfn ) (Tuple) \u2014 Preprocess the rendered report and return the toc dict </>","title":"pipen_report"},{"location":"api/pipen_report/#pipen_report","text":"</> Report generation system for pipen module","title":"pipen_report"},{"location":"api/pipen_report/#pipen_reportreport_plugin","text":"</> Report generation system for pipen Classes PipenReport \u2014 Report plugin for pipen </> module","title":"pipen_report.report_plugin"},{"location":"api/pipen_report/#pipen_reportcli","text":"</> Provide a command line interface for the pipen_report plugin Classes PipenCliReport \u2014 CLI utility for pipen-report </> module","title":"pipen_report.cli"},{"location":"api/pipen_report/#pipen_reportfilters","text":"</> Filters for pipen-report This module contains the filters for pipen-report. The filters are used in the report template to render the report. Functions datatable ( path , *args , ncols , nrows , double_precision , excluded , **kwargs ) (str) \u2014 Read data from a file, using pandas.read_csv() and make it to json sojs can handle it and render it with </> register_component ( kind , *aliases ) (Callable) \u2014 Register a component renderer </> register_ui ( kind , *aliases ) (Callable) \u2014 Register a UI renderer </> render_component ( component , job , level ) (str) \u2014 Render the content based on its kind. </> render_job ( job , report_file , h ) (str) \u2014 Generate a report template from a report json file </> render_ui ( contents , ui , job , level ) (str) \u2014 Render a ui </> module","title":"pipen_report.filters"},{"location":"api/pipen_report/#pipen_reportversions","text":"</> Provides pipen and pipen-report versions module","title":"pipen_report.versions"},{"location":"api/pipen_report/#pipen_reportpreprocess","text":"</> Provides preprocess Attributes TAG_ATTR_RE \u2014 ,re.VERBOSE | re.DOTALL, ) def _preprocess_slash_h( source: str, index: int, page: int, kind: str, text: str | None = None, ) -> Tuple[str, Mapping[str, Any]]: \"\"\"Preprocess headings (h1 or h2 tag) adding anchor links Add an anchor link after the tag and produce the toc dict For example, if the source is <h1>Title 1</h1> , the output will be <h1>Title 1</h1><a id=\"prt-h1-1-title-1\" class=\"pipen-report-toc-anchor\"> </a> Args: text: The string repr of the tag (e.g <h1>Title 1</h1> ) index: The index of this kind of heading in the document page: Which page are we on? kind: h1 or h2 Functions preprocess ( text , basedir , toc_switch , paging , relpath_tags , logfn ) (Tuple) \u2014 Preprocess the rendered report and return the toc dict </>","title":"pipen_report.preprocess"},{"location":"api/pipen_report.preprocess/","text":"module pipen_report . preprocess </> Provides preprocess Attributes TAG_ATTR_RE \u2014 ,re.VERBOSE | re.DOTALL, ) def _preprocess_slash_h( source: str, index: int, page: int, kind: str, text: str | None = None, ) -> Tuple[str, Mapping[str, Any]]: \"\"\"Preprocess headings (h1 or h2 tag) adding anchor links Add an anchor link after the tag and produce the toc dict For example, if the source is <h1>Title 1</h1> , the output will be <h1>Title 1</h1><a id=\"prt-h1-1-title-1\" class=\"pipen-report-toc-anchor\"> </a> Args: text: The string repr of the tag (e.g <h1>Title 1</h1> ) index: The index of this kind of heading in the document page: Which page are we on? kind: h1 or h2 Functions preprocess ( text , basedir , toc_switch , paging , relpath_tags , logfn ) (Tuple) \u2014 Preprocess the rendered report and return the toc dict </> function pipen_report.preprocess . preprocess ( text , basedir , toc_switch , paging , relpath_tags , logfn ) </> Preprocess the rendered report and return the toc dict This is not only faster than using a xml/html parsing library but also more compatible with JSX, as most python xml/html parser cannot handle JSX We use h1 and h2 tags to form TOCs. h1 and h2 tags have to be at the top level, which means you should not wrap them with any container in your svelte report template. h1 tag should be the first tag in the document after </script> . Otherwise those non-h1 tags will appear in all pages and the relative paths won't be parsed. Parameters text (str) \u2014 The rendered report basedir (Path) \u2014 The base directory toc_switch (bool) \u2014 Whether render a TOC? paging (Union) \u2014 Number of h1's in a pageFalse to disable Returns (Tuple) The preprocessed text and the toc dict","title":"pipen_report.preprocess"},{"location":"api/pipen_report.preprocess/#pipen_reportpreprocess","text":"</> Provides preprocess Attributes TAG_ATTR_RE \u2014 ,re.VERBOSE | re.DOTALL, ) def _preprocess_slash_h( source: str, index: int, page: int, kind: str, text: str | None = None, ) -> Tuple[str, Mapping[str, Any]]: \"\"\"Preprocess headings (h1 or h2 tag) adding anchor links Add an anchor link after the tag and produce the toc dict For example, if the source is <h1>Title 1</h1> , the output will be <h1>Title 1</h1><a id=\"prt-h1-1-title-1\" class=\"pipen-report-toc-anchor\"> </a> Args: text: The string repr of the tag (e.g <h1>Title 1</h1> ) index: The index of this kind of heading in the document page: Which page are we on? kind: h1 or h2 Functions preprocess ( text , basedir , toc_switch , paging , relpath_tags , logfn ) (Tuple) \u2014 Preprocess the rendered report and return the toc dict </> function","title":"pipen_report.preprocess"},{"location":"api/pipen_report.preprocess/#pipen_reportpreprocesspreprocess","text":"</> Preprocess the rendered report and return the toc dict This is not only faster than using a xml/html parsing library but also more compatible with JSX, as most python xml/html parser cannot handle JSX We use h1 and h2 tags to form TOCs. h1 and h2 tags have to be at the top level, which means you should not wrap them with any container in your svelte report template. h1 tag should be the first tag in the document after </script> . Otherwise those non-h1 tags will appear in all pages and the relative paths won't be parsed. Parameters text (str) \u2014 The rendered report basedir (Path) \u2014 The base directory toc_switch (bool) \u2014 Whether render a TOC? paging (Union) \u2014 Number of h1's in a pageFalse to disable Returns (Tuple) The preprocessed text and the toc dict","title":"pipen_report.preprocess.preprocess"},{"location":"api/pipen_report.report_manager/","text":"module pipen_report . report_manager </> Classes NPMBuildingError \u2014 Error when npm run build failed </> ReportManager \u2014 Initialize the report manager </> class pipen_report.report_manager . NPMBuildingError ( ) </> Bases Exception BaseException Error when npm run build failed class pipen_report.report_manager . ReportManager ( plugin_opts , outdir , workdir , cachedir_for_cloud ) </> Initialize the report manager Methods build ( proc , nobuild , force_build , cached ) \u2014 Build report for a process </> check_npm_and_setup_dirs ( ) \u2014 Check if npm is available </> init_pipeline_data ( pipen ) \u2014 Write data to workdir </> render_proc_report ( proc ) \u2014 Render the report template for a process </> sync_reports ( logfn ) \u2014 Sync the reports to the cloud output directory if needed </> method check_npm_and_setup_dirs ( ) </> Check if npm is available method init_pipeline_data ( pipen ) </> Write data to workdir method render_proc_report ( proc ) </> Render the report template for a process Parameters proc (Proc) \u2014 The process status \u2014 The status of the process method build ( proc , nobuild , force_build , cached=False ) </> Build report for a process Parameters proc (pipen.proc.proc | str) \u2014 The process nobuild (bool) \u2014 Don't build the report cached (bool, optional) \u2014 Whether the process is cached method sync_reports ( logfn=None ) </> Sync the reports to the cloud output directory if needed","title":"pipen_report.report_manager"},{"location":"api/pipen_report.report_manager/#pipen_reportreport_manager","text":"</> Classes NPMBuildingError \u2014 Error when npm run build failed </> ReportManager \u2014 Initialize the report manager </> class","title":"pipen_report.report_manager"},{"location":"api/pipen_report.report_manager/#pipen_reportreport_managernpmbuildingerror","text":"</> Bases Exception BaseException Error when npm run build failed class","title":"pipen_report.report_manager.NPMBuildingError"},{"location":"api/pipen_report.report_manager/#pipen_reportreport_managerreportmanager","text":"</> Initialize the report manager Methods build ( proc , nobuild , force_build , cached ) \u2014 Build report for a process </> check_npm_and_setup_dirs ( ) \u2014 Check if npm is available </> init_pipeline_data ( pipen ) \u2014 Write data to workdir </> render_proc_report ( proc ) \u2014 Render the report template for a process </> sync_reports ( logfn ) \u2014 Sync the reports to the cloud output directory if needed </> method","title":"pipen_report.report_manager.ReportManager"},{"location":"api/pipen_report.report_manager/#pipen_reportreport_managerreportmanagercheck_npm_and_setup_dirs","text":"</> Check if npm is available method","title":"pipen_report.report_manager.ReportManager.check_npm_and_setup_dirs"},{"location":"api/pipen_report.report_manager/#pipen_reportreport_managerreportmanagerinit_pipeline_data","text":"</> Write data to workdir method","title":"pipen_report.report_manager.ReportManager.init_pipeline_data"},{"location":"api/pipen_report.report_manager/#pipen_reportreport_managerreportmanagerrender_proc_report","text":"</> Render the report template for a process Parameters proc (Proc) \u2014 The process status \u2014 The status of the process method","title":"pipen_report.report_manager.ReportManager.render_proc_report"},{"location":"api/pipen_report.report_manager/#pipen_reportreport_managerreportmanagerbuild","text":"</> Build report for a process Parameters proc (pipen.proc.proc | str) \u2014 The process nobuild (bool) \u2014 Don't build the report cached (bool, optional) \u2014 Whether the process is cached method","title":"pipen_report.report_manager.ReportManager.build"},{"location":"api/pipen_report.report_manager/#pipen_reportreport_managerreportmanagersync_reports","text":"</> Sync the reports to the cloud output directory if needed","title":"pipen_report.report_manager.ReportManager.sync_reports"},{"location":"api/pipen_report.report_plugin/","text":"module pipen_report . report_plugin </> Report generation system for pipen Classes PipenReport \u2014 Report plugin for pipen </> class pipen_report.report_plugin . PipenReport ( ) </> Report plugin for pipen Configurations: report: The report template or file, None to disable report_order: The order of the process to show in the index page and app menu report_toc: Whether include TOC for the process report or not report_paging: Split the report for a process by h1's None: don't split; 3: 3 h1's in a page report_loglevel: logging level report_force_export: Force the process to export output when report template is given report_npm: Path to npm report_nmdir: Where should the frontend dependencies installed? By default, the frontend dependencies will be installed in frontend/ of the python package directory. However, this directory may not be writable. In this case, the frontend dependencies will be installed in the directory specified. report_nobuild: Don't build the final report. If True only preprare the environment Say if you want to do the building manually report_extlibs: External components to be used in the report report_no_collapse_pgs: Don't collapse the procgroups in the index page","title":"pipen_report.report_plugin"},{"location":"api/pipen_report.report_plugin/#pipen_reportreport_plugin","text":"</> Report generation system for pipen Classes PipenReport \u2014 Report plugin for pipen </> class","title":"pipen_report.report_plugin"},{"location":"api/pipen_report.report_plugin/#pipen_reportreport_pluginpipenreport","text":"</> Report plugin for pipen Configurations: report: The report template or file, None to disable report_order: The order of the process to show in the index page and app menu report_toc: Whether include TOC for the process report or not report_paging: Split the report for a process by h1's None: don't split; 3: 3 h1's in a page report_loglevel: logging level report_force_export: Force the process to export output when report template is given report_npm: Path to npm report_nmdir: Where should the frontend dependencies installed? By default, the frontend dependencies will be installed in frontend/ of the python package directory. However, this directory may not be writable. In this case, the frontend dependencies will be installed in the directory specified. report_nobuild: Don't build the final report. If True only preprare the environment Say if you want to do the building manually report_extlibs: External components to be used in the report report_no_collapse_pgs: Don't collapse the procgroups in the index page","title":"pipen_report.report_plugin.PipenReport"},{"location":"api/pipen_report.utils/","text":"module pipen_report . utils </> Functions cache_fun ( func ) (Callable) \u2014 Decorator to cache the result of a function to disk </> get_config ( key , runtime_value ) (Any) \u2014 Get the configuration </> function pipen_report.utils . get_config ( key , runtime_value=None ) \u2192 Any </> Get the configuration function pipen_report.utils . cache_fun ( func ) \u2192 Callable </> Decorator to cache the result of a function to disk","title":"pipen_report.utils"},{"location":"api/pipen_report.utils/#pipen_reportutils","text":"</> Functions cache_fun ( func ) (Callable) \u2014 Decorator to cache the result of a function to disk </> get_config ( key , runtime_value ) (Any) \u2014 Get the configuration </> function","title":"pipen_report.utils"},{"location":"api/pipen_report.utils/#pipen_reportutilsget_config","text":"</> Get the configuration function","title":"pipen_report.utils.get_config"},{"location":"api/pipen_report.utils/#pipen_reportutilscache_fun","text":"</> Decorator to cache the result of a function to disk","title":"pipen_report.utils.cache_fun"},{"location":"api/pipen_report.versions/","text":"module pipen_report . versions </> Provides pipen and pipen-report versions","title":"pipen_report.versions"},{"location":"api/pipen_report.versions/#pipen_reportversions","text":"</> Provides pipen and pipen-report versions","title":"pipen_report.versions"},{"location":"api/source/pipen_report.cli/","text":"SOURCE CODE pipen_report. cli DOCS \"\"\"Provide a command line interface for the pipen_report plugin\"\"\" from __future__ import annotations import stat import http.server import socketserver import subprocess as sp from contextlib import suppress from pathlib import Path from typing import TYPE_CHECKING import rtoml from pipen.cli import CLIPlugin from .defaults import NPM , NMDIR , LOCAL_CONFIG , GLOBAL_CONFIG , CONFIG_KEYS from .utils import get_config if TYPE_CHECKING : from argx import ArgumentParser , Namespace class PipenCliReport ( CLIPlugin ): DOCS \"\"\"CLI utility for pipen-report\"\"\" from .versions import __version__ name = \"report\" def __init__ ( self , parser : ArgumentParser , subparser : ArgumentParser , ) -> None : super () . __init__ ( parser , subparser ) config_command = subparser . add_command ( \"config\" , help = \"Configure pipen-report\" , exit_on_void = True , ) config_command . add_argument ( \"--local\" , \"-l\" , help = ( \"Save the configuration locally (./.pipen-report.toml)? \" \"Otherwise, the configuration will be saved globally \" \"in the user's home directory (~/.pipen-report.toml). \" \"The local configuration has higher priority than the \" \"global configuration.\" ), action = \"store_true\" , default = False , ) config_command . add_argument ( \"--list\" , help = \"List the configuration\" , action = \"store_true\" , default = False , ) config_command . add_argument ( \"--extlibs\" , help = \"External components to be used in the report\" , ) config_command . add_argument ( \"--npm\" , help = \"The path to npm\" , default = NPM , ) config_command . add_argument ( \"--nmdir\" , help = ( \"Where should the frontend dependencies installed? \\n \" \"By default, the frontend dependencies will be installed in \" \"frontend/ of the python package directory. However, this \" \"directory may not be writable. In this case, the frontend \" \"dependencies will be installed in the directory specified.\" ), default = NMDIR , ) config_command . add_argument ( \"--nobuild\" , help = ( \"Don't build the final report. \" \"If True only preprare the environment \" \"Say if you want to do the building manually\" ), action = \"store_true\" , default = False , ) subparser . add_command ( \"update\" , help = \"Install/Update the frontend dependencies\" , ) serve_command = subparser . add_command ( \"serve\" , help = \"Serve the report\" , ) serve_command . add_argument ( \"--port\" , \"-p\" , help = \"The port to serve the report\" , default = 18520 , type = int , ) serve_command . add_argument ( \"--host\" , help = \"The host to serve the report\" , default = \"127.0.0.1\" ) serve_command . add_argument ( \"--reportdir\" , \"-r\" , help = ( \"The directory of the reports, where the REPORTS/ directory is\" ), required = True , type = Path , ) def exec_command ( self , args : Namespace ) -> None : DOCS \"\"\"Execute the command\"\"\" if args . COMMAND2 == \"config\" : self . _config ( args ) elif args . COMMAND2 == \"update\" : self . _update ( args ) elif args . COMMAND2 == \"serve\" : # pragma: no cover self . _serve ( args ) else : # pragma: no cover super () . exec_command ( args ) def _config ( self , args : Namespace ) -> None : \"\"\"Execute the config command\"\"\" if args . list : print ( \"Note that these values can still be overwritten by:\" ) print ( \" \\033 [4m \\033 [1m\" \"pipeline.plugin_opts.report_<key> = <value>\" \" \\033 [0m \\033 [0m\" ) print ( \"\" ) keylen = max ( len ( key ) for key in CONFIG_KEYS ) for key in CONFIG_KEYS : print ( f \" \\033 [4m \\033 [1m { key } \\033 [0m \\033 [0m\" . ljust ( keylen + 17 , ' ' ) + f \"= { get_config ( key ) } \" ) return config_file = LOCAL_CONFIG if args . local else GLOBAL_CONFIG config = {} config [ \"npm\" ] = args . npm config [ \"nmdir\" ] = args . nmdir rtoml . dump ( config , config_file ) print ( \"The configuration is saved to\" ) print ( f \" \\033 [4m { config_file } \\033 [0m\" ) def _update ( self , args : Namespace ) -> None : \"\"\"Execute the update command\"\"\" nmdir = Path ( get_config ( \"nmdir\" )) . resolve () if nmdir != Path ( NMDIR ) . resolve (): # run_copy(NMDIR, nmdir, overwrite=True, quiet=True) # copy package.json nmdir . mkdir ( parents = True , exist_ok = True ) Path ( NMDIR ) . joinpath ( \"package.json\" ) . copy ( nmdir / \"package.json\" ) Path ( NMDIR ) . joinpath ( \"package-lock.json\" ) . copy ( nmdir / \"package-lock.json\" ) if not ( nmdir . stat () . st_mode & stat . S_IWUSR ): # pragma: no cover print ( \"The frontend directory is not writable:\" ) print ( f \" \\033 [4m { nmdir } \\033 [0m\" ) print ( \"\" ) print ( \"You should either:\" ) print ( \"1. Run `sudo pipen report update` \" \"to install/update the frontend dependencies\" ) print ( \"2. Run `pipen report config --nmdir <dir>` \" \"to specify a different directory to install \" \"the frontend dependencies\" ) else : print ( \"The frontend directory:\" ) print ( f \" \\033 [4m { nmdir } \\033 [0m\" ) print ( \"\" ) if not ( nmdir / \"node_modules\" ) . exists (): print ( \"Running: npm install ... (first time setup)\" ) npm_command = \"install\" else : print ( \"Running: npm update ...\" ) npm_command = \"update\" p = sp . Popen ( [ get_config ( \"npm\" ), npm_command ], cwd = str ( nmdir ), stdout = sp . PIPE , stderr = sp . STDOUT , ) for line in p . stdout : print ( line . decode (), end = \"\" ) p . wait () def _serve ( self , args : Namespace ) -> None : # pragma: no cover \"\"\"Execute the serve command\"\"\" reportdir = args . reportdir port = args . port host = args . host if not ( reportdir / \"REPORTS\" ) . exists (): print ( \"The REPORTS/ directory is not found in:\" ) print ( f \" \\033 [4m { reportdir } \\033 [0m\" ) print ( \"The report is not generated yet?\" ) return print ( f \"Serving the report and data at http:// { host } : { port } /\" ) print ( f \"Find the report page: http:// { host } : { port } /REPORTS/\" ) print ( \"Press Ctrl+C to stop the server\" ) print ( \"\" ) class Handler ( http . server . SimpleHTTPRequestHandler ): \"\"\"The request handler\"\"\" def __init__ ( self , * args , ** kwargs ) -> None : kwargs [ \"directory\" ] = reportdir super () . __init__ ( * args , ** kwargs ) def do_GET ( self ) -> None : \"\"\"Handle the GET request\"\"\" if self . path == \"/REPORTS\" : self . path = \"/REPORTS/index.html\" try : super () . do_GET () except BrokenPipeError as e : self . log_error ( str ( e )) with socketserver . TCPServer (( host , port ), Handler ) as httpd : with suppress ( KeyboardInterrupt ): httpd . serve_forever ()","title":"pipen_report.cli"},{"location":"api/source/pipen_report.filters/","text":"SOURCE CODE pipen_report. filters DOCS \"\"\"Filters for pipen-report This module contains the filters for pipen-report. The filters are used in the report template to render the report. \"\"\" from __future__ import annotations import re import html import json import textwrap import warnings import imagesize from contextlib import suppress from typing import Any , Iterable , Union , List , Mapping from os import PathLike from pathlib import Path from yunpath import AnyPath from markdown import markdown as markdown_parse TAB = \" \" def datatable ( DOCS path : PathLike , * args : Any , ncols : Union [ int , Iterable ] = None , nrows : Union [ int , Iterable ] = None , double_precision : int = 4 , excluded : set = None , ** kwargs : Any , ) -> str : \"\"\"Read data from a file, using pandas.read_csv() and make it to json so js can handle it and render it with <DataTable /> Args: path (PathLike): The path to the data file. *args (Any): Additional positional arguments to pass to pandas.read_csv(). ncols (Union[int, Iterable], optional): Either the number of columns to select or an iterable of column indices or names. Defaults to None. nrows (Union[int, Iterable], optional): Either the number of rows to select or an iterable of row indices. Defaults to None. double_precision (int, optional): The precision for double numbers. See also pandas.DataFrame.to_json(). Defaults to 4. excluded (set, optional): A set of column names to exclude from the resulting DataFrame. Defaults to None. **kwargs (Any): Additional keyword arguments to pass to pandas.read_csv(). Returns: str: A JSON format of the data. \"\"\" with warnings . catch_warnings (): warnings . simplefilter ( \"ignore\" ) import pandas kwargs . setdefault ( \"sep\" , \" \\t \" ) df = pandas . read_csv ( path , * args , ** kwargs ) if not isinstance ( df . index , pandas . RangeIndex ): df = df . reset_index ( names = [ \"ROWNAMES\" ]) if excluded : kept_cols = [ col for col in df . columns if col not in excluded ] df = df . loc [:, kept_cols ] # use ncols and nrows to filter if nrows is None : nrows = df . shape [ 0 ] if ncols is None : ncols = df . shape [ 1 ] if isinstance ( nrows , int ): nrows = min ( nrows , df . shape [ 0 ]) nrows = range ( nrows ) # type: ignore if isinstance ( ncols , int ): ncols = min ( ncols , df . shape [ 1 ]) ncols = range ( ncols ) # type: ignore if all ( isinstance ( row , int ) for row in nrows ): nrows = df . index [ nrows ] if all ( isinstance ( col , int ) for col in ncols ): ncols = df . columns [ ncols ] df = df . loc [ nrows , ncols ] # \".\" in column names causing problem at frontend df = df . rename ( lambda x : re . sub ( r \"[^\\w]+\" , \"_\" , x ), axis = \"columns\" ) # add id for sorting purposes if \"id\" not in df : df [ \"id\" ] = range ( df . shape [ 0 ]) return df . to_json ( orient = \"records\" , double_precision = double_precision ) def render_component ( DOCS component : str | Mapping [ str , Any ], job : Mapping [ str , Any ] = None , level : int = 0 , ) -> str : \"\"\" Render the content based on its kind. Args: component (Any): The content to be rendered. job (Mapping[str, Any]): The job information. level (int): The level of the content. Returns: str: The rendered content. Raises: ValueError: If the kind of component in toc is unknown. \"\"\" job = job or {} if not isinstance ( component , dict ): return _tag ( \"p\" , slot = html . escape ( str ( component )), _level = level ) cont = component . copy () kind = cont . pop ( \"kind\" ) if kind not in render_component . renderers : raise ValueError ( f \"Unknown kind of component: { kind } . \" f \"Allowed components: { list ( render_component . renderers ) } \" ) return render_component . renderers [ kind ]( cont , job = job , level = level ) render_component . renderers = {} def register_component ( kind : str , * aliases : str ): DOCS \"\"\"Register a component renderer Args: kind (str): The kind of component to register. *aliases (str): The aliases of the kind. Returns: Callable: The decorator to register the component renderer. \"\"\" kinds = [ kind , * aliases ] def decorator ( func ): for knd in kinds : render_component . renderers [ knd ] = func return func return decorator @register_component ( \"accordion\" ) def _render_accordion ( cont : Mapping [ str , Any ], job : Mapping [ str , Any ], level : int , ) -> str : \"\"\" Render an accordion item based on the given content, job, and level. Args: cont (Mapping[str, Any]): The content of the accordion item. job (Mapping[str, Any]): The job information. level (int): The level of the accordion item. Returns: str: The rendered accordion item. \"\"\" cont = cont . copy () ui = cont . pop ( \"ui\" , \"flat\" ) contents = cont . pop ( \"contents\" , []) return _tag ( \"AccordionItem\" , _level = level , slot = render_ui ( contents , ui , job = job , level = 1 ), ** cont , ) @register_component ( \"descr\" ) def _render_descr ( cont : Mapping [ str , Any ], job : Mapping [ str , Any ], level : int , ) -> str : \"\"\" Render the description based on the given content, job, and level. Args: cont (Mapping[str, Any]): The content mapping. job (Mapping[str, Any]): The job mapping. level (int): The level of the description. Returns: str: The rendered description. \"\"\" cont = cont . copy () if cont . get ( \"once\" , False ) and job [ \"index\" ] != 0 : return \"\" slot = str ( cont . pop ( \"content\" , cont . pop ( \"descr\" , \"\" )) or \"\" ) markdown = cont . pop ( \"markdown\" , False ) if markdown : slot = markdown_parse ( slot ) title = cont . pop ( \"title\" , cont . pop ( \"name\" , None )) return _tag ( \"Descr\" , slot = slot , _level = level , title = title , ** cont ) @register_component ( \"error\" ) def _render_error ( cont : Mapping [ str , Any ], job : Mapping [ str , Any ], level : int , ) -> str : \"\"\" Render an error message as an inline notification. Args: cont (Mapping[str, Any]): The content of the error message. job (Mapping[str, Any]): The job information. level (int): The level of the error message. Returns: str: The rendered error message as a string. \"\"\" cont [ \"subtitle\" ] = str ( cont . pop ( \"content\" , \"\" )) cont . setdefault ( \"hideCloseButton\" , True ) cont . setdefault ( \"lowContrast\" , True ) cont . setdefault ( \"kind_\" , \"warning\" ) return _tag ( \"InlineNotification\" , ** cont , _level = level ) @register_component ( \"list\" ) def _render_list ( cont : Mapping [ str , Any ], job : Mapping [ str , Any ], level : int , ) -> str : \"\"\" Render a list. Args: cont (Mapping[str, Any]): The container containing the list properties. job (Mapping[str, Any]): The job containing the list items. level (int): The level of the list. Returns: str: The rendered list as a string. \"\"\" ordered = cont . pop ( \"ordered\" , False ) items = cont . pop ( \"items\" , []) tag = \"OrderedList\" if ordered else \"UnorderedList\" list_items = [ _tag ( \"ListItem\" , slot = item , _level = 1 ) for item in items ] return _tag ( tag , slot = \" \\n \" . join ( list_items ), ** cont , _level = level ) @register_component ( \"table\" , \"datatable\" ) def _render_table ( cont : Mapping [ str , Any ], job : Mapping [ str , Any ], level : int , ) -> str : \"\"\" Render a table. Args: cont (Mapping[str, Any]): The container for the table attributes. Keys will be passed to `<DataTable ... />` component. `data` is special key to hold arguments passed to `datatable` filter. `data.file` or `data.path` is used to hold the path to the data file. The rest of the keys in `data` are passed to `datatable` filter. `src` can be True so that `data.path` or `data.file` is used as the `src`. job (Mapping[str, Any]): The container for the job attributes. level (int): The level of the table. Returns: str: The rendered table as a string. \"\"\" attrs = cont . copy () data = attrs . pop ( \"data\" , {}) . copy () src = attrs . get ( \"src\" , True ) path = data . pop ( \"path\" , data . pop ( \"file\" , src )) if isinstance ( path , bool ): raise ValueError ( \"No data.path or data.file is specified\" ) # Let's check where the path is. # It could be on the cloud or local. outdir = job [ \"outdir\" ] # carries the information of the path system path = AnyPath ( path ) if path . is_relative_to ( outdir ): spec_outdir = getattr ( outdir , \"spec\" , outdir ) path = spec_outdir / path . relative_to ( outdir ) if src is True : attrs [ \"src\" ] = str ( path ) attrs [ \"data\" ] = json . loads ( datatable ( path , ** data )) return _tag ( \"DataTable\" , ** attrs , _level = level ) @register_component ( \"img\" , \"image\" ) def _render_image ( cont : Mapping [ str , Any ], job : Mapping [ str , Any ], level : int , ) -> str : \"\"\"Render an image Args: cont (Mapping[str, Any]): The container containing the image attributes. job (Mapping[str, Any]): The job containing the image data. level (int): The level of the image in the hierarchy. Returns: str: The rendered image as a string. \"\"\" attrs = cont . copy () src = attrs [ \"src\" ] width = attrs . get ( \"width\" , None ) height = attrs . get ( \"height\" , None ) if not width or not height : with suppress ( FileNotFoundError ): width , height = imagesize . get ( src ) if width > 0 and height > 0 : attrs [ \"width\" ] = width attrs [ \"height\" ] = height return _tag ( \"Image\" , ** attrs , _level = level ) @register_component ( \"table_img\" , \"table_image\" ) def _render_table_image ( cont : Mapping [ str , Any ], job : Mapping [ str , Any ], level : int , ) -> str : \"\"\" Render a table image with optional name and description. Args: cont (Mapping[str, Any]): The container containing the image details. job (Mapping[str, Any]): The job details. level (int): The level of the table image. Returns: str: The rendered table image HTML. \"\"\" cont = cont . copy () name = cont . pop ( \"name\" , cont . pop ( \"title\" , cont . pop ( \"caption\" , None ))) descr = cont . pop ( \"descr\" , None ) markdown = cont . pop ( \"markdown\" , False ) cont . setdefault ( \"class\" , \"pipen-report-table-image\" ) return _tag ( \"div\" , slot = \" \\n \" . join ( [ _render_descr ( { \"content\" : descr , \"title\" : name , \"class\" : \"pipen-report-table-image-descr\" , \"markdown\" : markdown , }, job = job , level = 1 , ) if name or descr else \"\" , _render_image ( cont , job = job , level = 1 ), ] ), _level = level , ) @register_component ( \"tab\" ) def _render_tab ( cont : Mapping [ str , Any ], job : Mapping [ str , Any ], level : int , ) -> str : \"\"\" Render a tab. Args: cont (Mapping[str, Any]): The container containing the tab information. job (Mapping[str, Any]): The job information. level (int): The level of the tab. Returns: str: The rendered tab. \"\"\" ui = cont . get ( \"ui\" , \"flat\" ) return ( _tag ( \"Tab\" , label = cont . get ( \"name\" , cont . get ( \"title\" , cont . get ( \"label\" ))), _level = level , ), _tag ( \"TabContent\" , slot = render_ui ( cont [ \"contents\" ], ui , job = job , level = 1 ), _level = level , ), ) @register_component ( \"tag\" ) def _render_tag ( cont : Mapping [ str , Any ], job : Mapping [ str , Any ], level : int , ) -> str : \"\"\" Render a tag. Args: cont (Mapping[str, Any]): The container containing the tag information. job (Mapping[str, Any]): The job information. level (int): The level of the tag. Returns: str: The rendered tag. \"\"\" tag = cont . pop ( \"tag\" ) return _tag ( tag , ** cont , _level = level ) def render_ui ( DOCS contents : List [ Mapping [ str , Any ]], ui : str , job : Mapping [ str , Any ] = None , level : int = 0 , ) -> str : \"\"\"Render a ui Args: contents (List[Mapping[str, Any]]): The contents to render in the UI. ui (str): The type of UI to render. Allowed values are \"flat\", \"table_of_images\", \"accordion\", and \"tabs\". job (Mapping[str, Any], optional): The job information. Defaults to None. level (int, optional): The level of the UI. Defaults to 0. Returns: str: The rendered UI as a string. Raises: ValueError: If the provided UI type is not one of the allowed values. \"\"\" job = job or {} ui_parts = ui . split ( \":\" ) if ui_parts [ 0 ] not in render_ui . renderers : raise ValueError ( f \"Unknown ui: { ui_parts [ 0 ] } . Allowed: { list ( render_ui . renderers ) } \" ) renderer = render_ui . renderers [ ui_parts [ 0 ]] return renderer ( contents , job , level , * ui_parts [ 1 :]) render_ui . renderers = {} def register_ui ( kind : str , * aliases : str ): DOCS \"\"\"Register a UI renderer Args: kind (str): The kind of UI to register. *aliases (str): The aliases of the kind. Returns: Callable: The decorator to register the UI renderer. \"\"\" kinds = [ kind , * aliases ] def decorator ( func ): for knd in kinds : render_ui . renderers [ knd ] = func return func return decorator @register_ui ( \"flat\" ) def _ui_flat ( contents : List [ Mapping [ str , Any ]], job : Mapping [ str , Any ], level : int , ) -> str : \"\"\"Render a flat ui Args: contents (List[Mapping[str, Any]]): The contents to render. job (Mapping[str, Any]): The job information. level (int): The level of the UI. Returns: str: The rendered UI as a string. \"\"\" return \" \\n \" . join ( render_component ( cont , job , level ) for cont in contents ) @register_ui ( \"dropdown_switcher\" ) def _ui_dropdown_switcher ( contents : List [ Mapping [ str , Any ]], job : Mapping [ str , Any ], level : int , ui_arg : str = None , ) -> str : \"\"\" Render a dropdown switcher UI. Args: contents (List[Mapping[str, Any]]): The contents to be rendered. job (Mapping[str, Any]): The job information. level (int): The level of the dropdown switcher. Returns: str: The rendered dropdown switcher HTML. Raises: ValueError: If the 'kind' attribute of any content is not 'tab'. \"\"\" ds_id = _ui_dropdown_switcher . counter _ui_dropdown_switcher . counter += 1 selected_id = ui_arg or \"0\" components = [] items = [] for i , cont in enumerate ( contents ): name = cont . pop ( \"ds_name\" ) items . append ({ \"id\" : str ( i ), \"text\" : name }) if \"kind\" not in cont : components . append ( _tag ( \"div\" , id = f \"pipen-report-ds-content- { ds_id } - { i } \" , _level = level , class_ = f \"pipen-report-ds-content- { ds_id } \" , style = \"display: none;\" if i != int ( selected_id ) else \"\" , ) ) else : components . append ( _tag ( \"div\" , id = f \"pipen-report-ds-content- { ds_id } - { i } \" , _level = level , class_ = f \"pipen-report-ds-content- { ds_id } \" , slot = render_component ( cont , job = job , level = 1 ), style = \"display: none;\" if i != int ( selected_id ) else \"\" , ) ) dropdown = _tag ( \"Dropdown\" , selectedId = selected_id , items = items , _level = level , ** { \"on:select\" : ( \"{ ( {detail} ) => {\" \" const conents = document.getElementsByClassName(\" f \" 'pipen-report-ds-content- { ds_id } '\" \" );\" \" for (const content of conents) {\" \" content.style.display = 'none';\" \" }\" \" document.getElementById(\" f \" 'pipen-report-ds-content- { ds_id } -' + detail.selectedId\" \" ).style.display = 'block';\" \"} }\" ) } ) return \" \\n \" . join ([ dropdown , * components ]) _ui_dropdown_switcher . counter = 0 @register_ui ( \"table_of_images\" ) def _ui_table_of_images ( contents : List [ Mapping [ str , Any ]], job : Mapping [ str , Any ], level : int , ui_arg : str = None , ) -> str : \"\"\" Render a table of images UI. Args: ui (str): The UI configuration for the table of images. contents (List[Mapping[str, Any]]): The list of image contents to be rendered. job (Mapping[str, Any]): The job information. level (int): The level of the table of images. Returns: str: The rendered table of images HTML. Raises: ValueError: If the 'kind' attribute of any image content is not 'table_img' or 'table_image'. \"\"\" ncol = int ( ui_arg or \"2\" ) grid_col = \"auto\" if len ( contents ) >= ncol else f \" { 100. / ncol } %\" img_src = [] for cont in contents : if isinstance ( cont , str ): cont = { \"kind\" : \"tag\" , \"tag\" : \"div\" , \"slot\" : cont } cont . setdefault ( \"kind\" , \"table_image\" ) img_src . append ( render_component ( cont , job = job , level = 1 )) return _tag ( \"div\" , slot = \" \\n \" . join ( img_src ), class_ = \"pipen-report-table-of-images\" , style = f \"grid-template-columns: repeat( { ncol } , { grid_col } ); \" , _level = level , ) @register_ui ( \"tabs\" ) def _ui_tabs ( contents : List [ Mapping [ str , Any ]], job : Mapping [ str , Any ], level : int , ) -> str : \"\"\" Render a tabs UI. Args: contents (List[Mapping[str, Any]]): List of tab contents. job (Mapping[str, Any]): Job information. level (int): Level of the UI. Returns: str: Rendered tabs UI. \"\"\" tabs = [] for cont in contents : if cont . get ( \"kind\" , \"tab\" ) != \"tab\" : raise ValueError ( \"Only kind = tab allowed in UI tabs\" ) cont [ \"kind\" ] = \"tab\" tabs . append ( render_component ( cont , job = job , level = 1 )) tab_slot = [ tab [ 0 ] for tab in tabs ] tab_slot . append ( _tag ( \"svelte:fragment\" , slot_ = \"content\" , slot = \" \\n \" . join ([ tab [ 1 ] for tab in tabs ]), _level = 1 , ) ) return _tag ( \"Tabs\" , slot = \" \\n \" . join ( tab_slot ), _level = level ) @register_ui ( \"accordion\" ) def _ui_accordion ( contents : List [ Mapping [ str , Any ]], job : Mapping [ str , Any ], level : int , ui_arg : str = None , ) -> str : \"\"\" Render an accordion ui. Args: contents (List[Mapping[str, Any]]): The contents of the accordion. job (Mapping[str, Any]): The job information. level (int): The level of the accordion. Returns: str: The rendered accordion UI. \"\"\" accords = [] ui_arg = ui_arg or \"start\" has_open = any ( cont . get ( \"open\" , False ) for cont in contents ) for i , cont in enumerate ( contents ): if cont . get ( \"kind\" , \"accordion\" ) != \"accordion\" : raise ValueError ( \"Only kind = accordion allow in ui accordion\" ) cont [ \"kind\" ] = \"accordion\" if not has_open and i == 0 : cont [ \"open\" ] = True accords . append ( render_component ( cont , job = job , level = 1 )) return _tag ( \"Accordion\" , align = ui_arg , slot = \" \\n \" . join ( accords ), _level = level ) def _tag ( tag : str , _level : int = 0 , ** attrs : Any ) -> str : \"\"\" Generate a html tag for report Args: tag (str): The HTML tag name. _level (int, optional): The indentation level. Defaults to 0. **attrs: Additional attributes for the HTML tag. Returns: str: The generated HTML tag. \"\"\" slot = attrs . pop ( \"slot\" , None ) tag_attrs = [] for k , v in attrs . items (): if v is False or v is None : continue if k == \"class_\" : k = \"class\" elif k == \"slot_\" : k = \"slot\" elif k == \"kind_\" : k = \"kind\" if isinstance ( v , str ): tag_attrs . append ( f \" { k } = { json . dumps ( v ) } \" ) elif v is True : tag_attrs . append ( k ) else : tag_attrs . append ( f \" { k } = {{ { json . dumps ( v ) } }} \" ) if not tag_attrs : tag_attrs = \"\" elif all ( len ( tag_attr ) <= 60 for tag_attr in tag_attrs ): tag_attrs = \" \" + \" \" . join ( tag_attrs ) else : tag_attrs = \" \\n \" + textwrap . indent ( \" \\n \" . join ( tag_attrs ), TAB ) out = ( f \"< { tag }{ tag_attrs } > { slot } </ { tag } >\" if ( slot and \" \\n \" not in slot and len ( slot ) <= 60 and not slot . startswith ( TAB ) and \" \\n \" not in tag_attrs ) else f \"< { tag }{ tag_attrs } > \\n { slot } \\n </ { tag } >\" if slot else f \"< { tag }{ tag_attrs } />\" ) return textwrap . indent ( out , TAB * _level ) def render_job ( DOCS job : Mapping [ str , Any ], report_file : str = \"report.json\" , h : int = 1 , ) -> str : \"\"\"Generate a report template from a report json file Args: job: The job data that can be used to render the template report_file: Absolute path to a report file or relative to `job.outdir` h: The starting level of the headers Returns: The generated report \"\"\" # h1 => list( # h2 => list( # title1 => list(ui1 => list(content11, content12)), # title2 => list(ui2 => list(content21, content22)) # ) # ) outdir = job [ \"outdir\" ] path = getattr ( outdir , \"spec\" , outdir ) if not Path ( report_file ) . is_absolute (): report_file = path / report_file toc_obj = json . loads ( report_file . read_text ()) out = [ \"<!-- Generated by pipen_report.filters.report -->\" ] out_append = out . append for h1 , section in toc_obj . items (): h1 = h1 . split ( \"#\" , 1 )[ 0 ] . strip () out_append ( _tag ( f \"h { h } \" , slot = html . escape ( h1 ))) for h2 , subsection in section . items (): h2 = h2 . split ( \"#\" , 1 )[ 0 ] . strip () if h2 : out_append ( _tag ( f \"h { h + 1 } \" , slot = html . escape ( h2 ))) for title , content in subsection . items (): title = title . split ( \"#\" , 1 )[ 0 ] . strip () if title : out_append ( _tag ( f \"h { h + 2 } \" , slot = html . escape ( title ))) for ui , conts in content . items (): ui = ui . split ( \"#\" , 1 )[ 0 ] . strip () out_append ( render_ui ( conts , ui , job = job )) out_append ( \"<!-- End of Generated by pipen_report.filters.report -->\" ) return \" \\n \" . join ( out ) FILTERS = {} FILTERS [ \"datatable\" ] = datatable FILTERS [ \"render_component\" ] = render_component FILTERS [ \"render_ui\" ] = render_ui FILTERS [ \"render_job\" ] = render_job","title":"pipen_report.filters"},{"location":"api/source/pipen_report/","text":"SOURCE CODE pipen_report DOCS \"\"\"Report generation system for pipen\"\"\" from . import _patch_copier # noqa: F401 from .versions import __version__","title":"pipen_report"},{"location":"api/source/pipen_report.preprocess/","text":"SOURCE CODE pipen_report. preprocess DOCS \"\"\"Provides preprocess\"\"\" from __future__ import annotations import math import json import hashlib import re import imagesize from contextlib import suppress from cloudpathlib import GSPath , AzureBlobPath , S3Path , CloudPath from yunpath import AnyPath from pathlib import Path from typing import Any , List , Mapping , Sequence , Tuple , Union , Callable from slugify import slugify from .utils import cache_fun RELPATH_TAGS = { \"a\" : \"href\" , \"embed\" : \"src\" , \"img\" : \"src\" , \"Link\" : \"href\" , \"Image\" : ( \"src\" , \"download\" ), \"ImageLoader\" : \"src\" , \"DataTable\" : \"src\" , \"iframe\" : \"src\" , \"Iframe\" : \"src\" , \"Plotly\" : \"src\" , \"Download\" : \"href\" , } H1_TAG = re . compile ( r \"(<h1.*?>.+?</h1>)\" , re . IGNORECASE | re . DOTALL ) H1_TAG_TEXT = re . compile ( r \"<h1.*?>(.+?)</h1>\" , re . IGNORECASE | re . DOTALL ) H2_TAG_TEXT = re . compile ( r \"<h2.*?>(.+?)</h2>\" , re . IGNORECASE | re . DOTALL ) TAG_RE = re . compile ( r \"<(?P<tag>[\\w-]+)(?P<attrs>.*?)(?P<end>/?>)\" , re . DOTALL ) # noqa: E501 # <Image src=\"{{ job.in.inimg}}\" # download={ {\"src\": \"{{ job.in.inimg } }\", \"tip\": \"Download the high resolution format\"} } /> # noqa: E501 # <Image src=\"{{ job.in.inimg}}\" # download={ {\"src\": 1, \"tip\": \"Download the high resolution format\"} } /> # <Image src=\"{{ job.in.inimg}}\" # download={ {\"src\": true, \"tip\": \"Download the high resolution format\"} } /> TAG_ATTR_RE = re . compile ( r \"\"\" \\s+(?P<attrname>[\\w-]+)= (?: \\\"(?P<attrval>[^\\\"]*)\\\" | \\{(?P<attrval2>.*?)\\} ) (?=\\s+[\\w-]+=|\\s*$) \"\"\" , re . VERBOSE | re . DOTALL , ) def _preprocess_slash_h ( source : str , index : int , page : int , kind : str , text : str | None = None , ) -> Tuple [ str , Mapping [ str , Any ]]: \"\"\"Preprocess headings (h1 or h2 tag) adding anchor links Add an anchor link after the tag and produce the toc dict For example, if the source is `<h1>Title 1</h1>`, the output will be `<h1>Title 1</h1><a id=\"prt-h1-1-title-1\" class=\"pipen-report-toc-anchor\"> </a>` Args: text: The string repr of the tag (e.g `<h1>Title 1</h1>`) index: The index of this kind of heading in the document page: Which page are we on? kind: h1 or h2 \"\"\" if text is None : matching = re . match ( H1_TAG_TEXT if kind == \"h1\" else H2_TAG_TEXT , source , ) text = matching . group ( 1 ) # prt: pipen-report-toc slug = f \"prt- { kind } - { index } - { slugify ( text ) } \" return ( f ' { source } <a id=\" { slug } \" class=\"pipen-report-toc-anchor\"> </a>' , { \"slug\" : slug , \"text\" : text , \"children\" : [], \"page\" : page }, ) def _path_to_url ( path : str , basedir : Path , tag : str , logfn : Callable ) -> str : \"\"\"Convert a path to a url to be used in the html If the path is a relative path to basedir.parent, it will be converted to a relative path to basedir. Otherwise, it will be copied to a directory where the html file can access. Args: path: The path to be converted basedir: The base directory, usually, path/to/REPORTS tag: The tag name Returns: The url \"\"\" path_passed = path apath = AnyPath ( path ) basedir_spec = getattr ( basedir , \"spec\" , basedir ) try : path = apath . relative_to ( basedir_spec . parent ) except ValueError : # if it's a relative path, suppose it is pages # otherwise, it's a path to the results if isinstance ( apath , ( GSPath , AzureBlobPath , S3Path )) or ( # New in cloudpathlib 0.23.0 HttpsPath is added as a CloudPath apath . is_absolute () and not isinstance ( apath , CloudPath ) ): # If we can't get the relative path, that means those files # are not exported, we need to copy the file to a directory # where the html file can access logfn ( \"warning\" , f \"An external resource ( { path } ) detected for { tag } , \" \"copying it to REPORTS/data ...\" , ) suffix = hashlib . sha256 ( path . encode ()) . hexdigest ()[: 8 ] path = f \"data/ { apath . stem } . { suffix }{ apath . suffix } \" ( basedir / path ) . write_bytes ( apath . read_bytes ()) # It's a relative path to the basedir, just use it else : # results are at uplevel dir path = f \"../ { path } \" path_via_base = basedir_spec . joinpath ( path ) if ( isinstance ( apath , ( GSPath , AzureBlobPath , S3Path )) and not path_via_base . joinpath ( path ) . exists () ): # The outdir is on cloud, we need to download the file logfn ( \"debug\" , f \"Downloading { path_passed } for report building ...\" ) path_via_base . parent . mkdir ( parents = True , exist_ok = True ) apath . download_to ( path_via_base ) return str ( path ) def _preprocess_relpath_tag ( matching : re . Match , basedir : Path , relpath_tags : Mapping [ str , str | Sequence [ str ]] | None , logfn : Callable , ) -> str : \"\"\"Preprocess tags with paths to be redirected\"\"\" pathval = None tag = matching . group ( \"tag\" ) rp_tags = RELPATH_TAGS . copy () rp_tags . update ( relpath_tags or {}) def repl_attrs ( mattrs ): nonlocal pathval attrname = mattrs . group ( \"attrname\" ) attrval = mattrs . group ( \"attrval\" ) attrval2 = mattrs . group ( \"attrval2\" ) if not ( tag in rp_tags and ( isinstance ( rp_tags [ tag ], str ) and attrname == rp_tags [ tag ] or attrname in rp_tags [ tag ] ) ): return mattrs . group ( 0 ) if tag == \"Image\" and attrname == \"download\" and attrval2 : av2 = json . loads ( attrval2 ) if not isinstance ( av2 , list ): av2 = [ av2 ] for i , av in enumerate ( av2 ): if isinstance ( av , str ): av2 [ i ] = { \"src\" : _path_to_url ( av , basedir , tag , logfn )} elif isinstance ( av , dict ): av [ \"src\" ] = _path_to_url ( av [ \"src\" ], basedir , tag , logfn ) return f \" { attrname } = {{ { json . dumps ( av2 ) } }} \" pathval = attrval urlval = _path_to_url ( attrval , basedir , tag , logfn ) return f ' { attrname } =\" { urlval } \"' attrs = re . sub ( TAG_ATTR_RE , repl_attrs , matching . group ( \"attrs\" )) if pathval and tag == \"Image\" and ( \"width=\" not in attrs or \"height=\" not in attrs ): # Add width and height to Image tag with suppress ( FileNotFoundError ): # pragma: no cover width , height = imagesize . get ( pathval ) if width > 0 and height > 0 : if \"width=\" not in attrs : attrs = f \" { attrs . rstrip () } width= {{ { width } }} \" if \"height=\" not in attrs : attrs = f \" { attrs . rstrip () } height= {{ { height } }} \" return f \"< { tag }{ attrs }{ matching . group ( 'end' ) } \" def _preprocess_math ( source : str ) -> str : \"\"\"Preprocess the Math tag A Math tag with latex content within it, which will be then encoded as base64 string with a data url. \"\"\" def callback ( matching ): # encode the latex content as base64 string from base64 import b64encode tag = matching . group ( 1 ) latex = matching . group ( 2 ) return ( f \" { tag } data:text/plain;base64, { b64encode ( latex . encode ()) . decode () } </Math>\" ) return re . sub ( r \"(<Math[^>]*?>)(.+?)</Math>\" , callback , source , flags = re . DOTALL , ) def _preprocess_markdown ( source : str ) -> str : \"\"\"Preprocess Markdown tag A Markdown tag with markdown content within it, which will be then rendered as html. \"\"\" from markdown import markdown def callback ( matching ): return markdown ( matching . group ( 1 )) return re . sub ( r \"<Markdown>(.+?)</Markdown>\" , callback , source , flags = re . DOTALL , ) def _preprocess_section ( section : str , h2_index : int , page : int , basedir : Path , relpath_tags : Mapping [ str , str | Sequence [ str ]] | None , logfn : Callable , ) -> Tuple [ str , List [ Mapping [ str , Any ]]]: \"\"\"Preprocesss a section of the document (between h1 tags) Args: section: The source code of the section h2_index: The start h2 index page: which page are we on? basedir: The base directory to save the relative path resources \"\"\" section = _preprocess_math ( section ) section = _preprocess_markdown ( section ) # handle relpath tags section = re . sub ( TAG_RE , lambda m : _preprocess_relpath_tag ( m , basedir , relpath_tags , logfn ), section , ) toc = [] def repl_h2 ( matching ): nonlocal h2_index h2 , toc_item = _preprocess_slash_h ( matching . group ( 0 ), h2_index , page = page , kind = \"h2\" , text = matching . group ( 1 ), ) toc . append ( toc_item ) h2_index += 1 return h2 return re . sub ( H2_TAG_TEXT , repl_h2 , section ), toc @cache_fun DOCS def preprocess ( text : str , basedir : Path , toc_switch : bool , paging : Union [ bool , int ], relpath_tags : Mapping [ str , str | Sequence [ str ]] | None , logfn : Callable , ) -> Tuple [ List [ str ], List [ Mapping [ str , Any ]]]: \"\"\"Preprocess the rendered report and return the toc dict This is not only faster than using a xml/html parsing library but also more compatible with JSX, as most python xml/html parser cannot handle JSX We use h1 and h2 tags to form TOCs. h1 and h2 tags have to be at the top level, which means you should not wrap them with any container in your svelte report template. h1 tag should be the first tag in the document after `</script>`. Otherwise those non-h1 tags will appear in all pages and the relative paths won't be parsed. Args: text: The rendered report basedir: The base directory toc_switch: Whether render a TOC? paging: Number of h1's in a page False to disable Returns: The preprocessed text and the toc dict \"\"\" # split the text h1 tags splits = re . split ( H1_TAG , text ) # splits[0] is header len_sections = ( len ( splits ) - 1 ) // 2 if len_sections == 0 : # no h1's section , _ = _preprocess_section ( splits [ 0 ], h2_index = 0 , page = 0 , basedir = basedir , relpath_tags = relpath_tags , logfn = logfn , ) return [ section ], [] if not paging : paging = len_sections n_pages = math . ceil ( len_sections / paging ) pages = [[ splits [ 0 ]] for _ in range ( n_pages )] h2_index = 0 toc = [] for i , splt in enumerate ( splits [ 1 :]): page = i // 2 // paging if i % 2 == 0 : # h1 h1 , toc_item = _preprocess_slash_h ( splt , index = i // 2 , page = page , kind = \"h1\" ) pages [ page ] . append ( h1 ) if toc_switch : toc . append ( toc_item ) else : section , toc_items = _preprocess_section ( splt , h2_index = h2_index , page = page , basedir = basedir , relpath_tags = relpath_tags , logfn = logfn , ) h2_index += len ( toc_items ) pages [ page ] . append ( section ) if toc_switch : toc [ - 1 ][ \"children\" ] . extend ( toc_items ) return [ \"\" . join ( page ) for page in pages ], toc","title":"pipen_report.preprocess"},{"location":"api/source/pipen_report.report_manager/","text":"SOURCE CODE pipen_report. report_manager DOCS from __future__ import annotations import inspect import json import re import shutil import sys import subprocess as sp import textwrap import traceback from contextlib import suppress from pathlib import Path from typing import TYPE_CHECKING , Any , Callable , List , Mapping , MutableMapping , Type from liquid import Liquid from copier import run_copy from yunpath import CloudPath , GSClient from cloudpathlib import AzureBlobClient , S3Client , GSPath , S3Path , AzureBlobPath from xqute.path import SpecCloudPath , MountedPath from pipen import Proc , ProcGroup from pipen.defaults import ProcInputType , ProcOutputType from pipen.exceptions import TemplateRenderingError from pipen.template import TemplateLiquid , TemplateJinja2 from pipen.utils import get_base , desc_from_docstring , get_marked from .filters import FILTERS from .preprocess import preprocess from .utils import UnifiedLogger , get_config , logger , rsync_to_cloud from .versions import version_str if TYPE_CHECKING : from pipen import Pipen from pipen.job import Job from pipen.template import Template ansi_escape = re . compile ( r \"\\x1B(?:[@-Z \\\\ -_]|\\[[0-?]*[ -/]*[@-~])\" ) def _render_file ( engine : Type [ Template ], engine_opts : MutableMapping [ str , Any ], source : str , render_data : Mapping [ str , Any ], ) -> str : \"\"\"Render a template file\"\"\" if engine in ( TemplateLiquid , TemplateJinja2 ): # Avoid {#if ... } being treated as jinja comments engine_opts [ \"comment_start_string\" ] = \"{!\" engine_opts [ \"comment_end_string\" ] = \"!}\" return engine ( source , ** engine_opts ) . render ( render_data ) class NPMBuildingError ( Exception ): DOCS \"\"\"Error when npm run build failed\"\"\" class ReportManager : DOCS def __init__ ( self , plugin_opts : Mapping [ str , Any ], outdir : Path | CloudPath , workdir : Path | CloudPath , cachedir_for_cloud : str , ) -> None : \"\"\"Initialize the report manager\"\"\" outdir = outdir / \"REPORTS\" if isinstance ( outdir , GSPath ): outdir_client = GSClient ( local_cache_dir = cachedir_for_cloud ) elif isinstance ( outdir , S3Path ): outdir_client = S3Client ( local_cache_dir = cachedir_for_cloud ) elif isinstance ( outdir , AzureBlobPath ): outdir_client = AzureBlobClient ( local_cache_dir = cachedir_for_cloud ) else : outdir_client = None if isinstance ( workdir , GSPath ): workdir_client = GSClient ( local_cache_dir = cachedir_for_cloud ) elif isinstance ( workdir , S3Path ): workdir_client = S3Client ( local_cache_dir = cachedir_for_cloud ) elif isinstance ( workdir , AzureBlobPath ): workdir_client = AzureBlobClient ( local_cache_dir = cachedir_for_cloud ) else : workdir_client = None # Make sure outdir and workdir are local paths if isinstance ( outdir , SpecCloudPath ): # modified by plugins like pipen-gcs self . outdir = MountedPath ( outdir . fspath , spec = outdir ) elif isinstance ( outdir , CloudPath ): # specified directly if outdir . client . _cache_tmp_dir : # default client, no specific local_cache_dir of client specified outdir = outdir_client . CloudPath ( str ( outdir )) self . outdir = MountedPath ( outdir . fspath , spec = outdir ) else : self . outdir = MountedPath ( outdir ) workdir = workdir / \".report-workdir\" if isinstance ( workdir , CloudPath ): if workdir . client . _cache_tmp_dir : # default client, no specific local_cache_dir of client specified workdir = workdir_client . CloudPath ( str ( workdir )) self . workdir = MountedPath ( workdir . fspath , spec = workdir ) else : self . workdir = MountedPath ( workdir ) self . npm = get_config ( \"npm\" , plugin_opts . get ( \"report_npm\" )) self . nmdir = Path ( get_config ( \"nmdir\" , plugin_opts . get ( \"report_nmdir\" ))) self . extlibs = get_config ( \"extlibs\" , plugin_opts . get ( \"report_extlibs\" )) self . nobuild = get_config ( \"nobuild\" , plugin_opts . get ( \"report_nobuild\" )) self . no_collapse_pgs = plugin_opts . get ( \"report_no_collapse_pgs\" ) or [] self . has_reports = False # Used to pass to the UI for rendering self . pipeline_data = None if isinstance ( self . no_collapse_pgs , str ): # pragma: no cover self . no_collapse_pgs = [ self . no_collapse_pgs ] def check_npm_and_setup_dirs ( self ) -> None : DOCS \"\"\"Check if npm is available\"\"\" logger . info ( \"Checking npm and frontend dependencies ...\" ) npm = shutil . which ( self . npm ) if npm is None : # pragma: no cover logger . error ( \"Cannot find npm. Please install it or specify the path to npm by:\" ) logger . error ( \"$ pipen report config [--local] --npm <path/to/npm>\" ) sys . exit ( 1 ) if not self . nmdir . is_dir (): # pragma: no cover logger . error ( \"Invalid nmdir: %s \" , self . nmdir ) logger . error ( \"Run `pipen report config [--local] --nmdir ...` to set it\" ) sys . exit ( 1 ) # check if frontend dependencies are installed if not ( self . nmdir / \"node_modules\" ) . is_dir (): # pragma: no cover logger . error ( \"Frontend dependencies are not installed\" ) logger . error ( \"Run `pipen report update` to install them\" ) sys . exit ( 1 ) self . workdir . mkdir ( parents = True , exist_ok = True ) pubdir = self . workdir / \"public\" if pubdir . is_symlink (): pubdir . unlink () nmdir = self . workdir / \"node_modules\" if nmdir . is_symlink (): nmdir . unlink () exdir = self . workdir / \"src\" / \"extlibs\" with suppress ( Exception ): exdir . rmtree () with suppress ( Exception ): exdir . mkdir ( parents = True , exist_ok = True ) # Check if self.workdir is writable try : testfile = self . workdir / \".writetest\" testfile . write_text ( \"test\" ) testfile . unlink () except Exception : # pragma: no cover logger . error ( \"The report workdir is not writable:\" ) logger . error ( \" %s \" , self . workdir ) traces = traceback . format_exc () . splitlines () for trace in traces : logger . debug ( trace ) sys . exit ( 1 ) # Copy rollup config file to workdir rollup_config = self . nmdir . joinpath ( \"rollup.config.js.jinja\" ) . read_text () rollup_config = Liquid ( rollup_config , from_file = False ) . render ( extlibs = self . extlibs ) self . workdir . joinpath ( \"rollup.config.js\" ) . write_text ( rollup_config ) self . nmdir . joinpath ( \"public\" ) . copytree ( self . outdir ) self . nmdir . joinpath ( \"src\" ) . copytree ( self . workdir / \"src\" ) self . nmdir . joinpath ( \"package.json\" ) . copy ( self . workdir / \"package.json\" ) node_lockfile = self . nmdir . joinpath ( \"package-lock.json\" ) bun_lockfile = self . nmdir . joinpath ( \"bun.lock\" ) if not bun_lockfile . exists () and not node_lockfile . exists (): logger . error ( \"Frontend package lock file not found.\" ) logger . error ( \"Run `pipen report install` to create it.\" ) sys . exit ( 1 ) if bun_lockfile . exists (): bun_lockfile . copy ( self . workdir / \"bun.lock\" ) else : node_lockfile . copy ( self . workdir / \"package-lock.json\" ) pubdir . symlink_to ( self . outdir ) nmdir . symlink_to ( self . nmdir / \"node_modules\" ) if self . extlibs : exdir . joinpath ( Path ( self . extlibs ) . name ) . symlink_to ( self . extlibs ) def _template_opts ( self , template_opts ) -> Mapping [ str , Any ]: \"\"\"Template options for renderring Only supports liquid and jinja2 \"\"\" out = template_opts . copy () out [ \"filters\" ] = { ** template_opts . get ( \"filters\" , {}), ** FILTERS } return out def _rendering_data ( self , proc : Proc ) -> Mapping [ str , Any ]: \"\"\"Compute the data to render report template Args: proc: The process Returns: The data to render report template \"\"\" def jobdata ( job : Job ) -> Mapping [ str , Any ]: \"\"\"Get data from each job\"\"\" # Do not use the mounted paths, since we are not building # in the job execution environment indata = {} for inkey , intype in proc . input . type . items (): if intype == ProcInputType . VAR or job . input [ inkey ] is None : indata [ inkey ] = job . input [ inkey ] continue if intype in ( ProcInputType . FILE , ProcInputType . DIR ): indata [ inkey ] = job . input [ inkey ] . spec if intype in ( ProcInputType . FILES , ProcInputType . DIRS ): indata [ inkey ] = [ f . spec for f in job . input [ inkey ]] outdata = {} for outkey , outtype in job . _output_types . items (): if outtype == ProcOutputType . VAR : outdata [ outkey ] = job . output [ outkey ] continue outdata [ outkey ] = job . output [ outkey ] . spec data = job . template_data [ \"job\" ] . copy () data . update ( { \"in\" : indata , \"in_\" : indata , \"out\" : outdata , } ) return data rendering_data = { \"proc\" : proc , \"envs\" : proc . envs , \"jobs\" : [ jobdata ( job ) for job in proc . jobs ], } # first job rendering_data [ \"job\" ] = rendering_data [ \"jobs\" ][ 0 ] rendering_data [ \"job0\" ] = rendering_data [ \"jobs\" ][ 0 ] return rendering_data def _npm_run_build ( self , cwd : Path , proc : str , ulogger : UnifiedLogger , force_build : bool , cached : bool , npages : int = 1 , procgroup : str | None = None , ) -> None : \"\"\"Run a command and log the messages proc is ProcGroup:Proc or Proc \"\"\" logfile = self . workdir / \"pipen-report.log\" if proc == \"_index\" : logfile . write_text ( \"\" ) destfile = self . outdir . joinpath ( \"pages\" , \"_index.js\" ) ini_datafile = self . workdir / \"src\" / \"init_data.json\" src_changed = ( not ini_datafile . exists () or not destfile . exists () or ini_datafile . stat () . st_mtime > destfile . stat () . st_mtime ) proc_or_pg = proc else : proc_or_pg = ( proc if not procgroup or self . no_collapse_pgs is True or procgroup in self . no_collapse_pgs else f \" { procgroup } / { proc } \" ) srcfile = self . workdir . joinpath ( \"src\" , \"pages\" , proc , \"proc.svelte\" ) destfile = self . outdir . joinpath ( \"pages\" , f \" { proc } .js\" ) src_changed = ( not destfile . exists () or srcfile . stat () . st_mtime > destfile . stat () . st_mtime ) if destfile . exists () and not force_build and cached and not src_changed : if proc == \"_index\" : ulogger . info ( \"Home page cached, skipping report building\" ) ulogger . info ( f \"- workdir: { self . workdir } \" ) else : ulogger . info ( f \" { proc_or_pg } cached, skipping report building.\" ) return ulogger . debug ( f \"Destination exists: { destfile . exists () } ; \" f \"force_build: { force_build } ; \" f \"cached: { cached } ; \" f \"src_changed: { src_changed } \" ) if proc_or_pg == \"_index\" : ulogger . info ( \"Building home page ...\" ) ulogger . info ( f \"- workdir: { self . workdir } \" ) elif npages == 1 : ulogger . info ( \"Building report ...\" ) else : ulogger . info ( f \"Building report ( { npages } pages) ...\" ) chars_to_error = \"(!)\" errors_to_ignore = { # \"(!) Unresolved dependencies\": # \"May be ignored if you are using external libraries\", } errored = False with open ( logfile , \"at\" ) as flog : flog . write ( \" \\n \" ) flog . write ( f \"# BUILDING { proc_or_pg } ... \\n \" ) flog . write ( \"---------------------------------------- \\n \" ) try : p = sp . Popen ( [ self . npm , \"run\" , \"build\" , \"--\" , f \"--configProc= { proc_or_pg } \" ], stdout = sp . PIPE , stderr = sp . STDOUT , cwd = str ( cwd ), ) for line in p . stdout : line = line . decode () logline = ansi_escape . sub ( \"\" , line ) . rstrip () # src/pages/_index/index.js \u2192 public/index/index.js flog . write ( ansi_escape . sub ( \"\" , line )) if \" \u2192 \" in logline and logline . startswith ( \"src/pages/\" ): ulogger . info ( f \"- { logline . split ( ' \u2192 ' )[ 0 ] } \" ) if logline . startswith ( chars_to_error ): # pragma: no cover if logline in errors_to_ignore : ulogger . warning ( f \" { logline } ( { errors_to_ignore [ logline ] } )\" ) else : ulogger . error ( f \" { logline } \" ) errored = True if errored : # pragma: no cover # Early stop p . terminate () p . kill () raise NPMBuildingError if p . wait () != 0 : # pragma: no cover raise NPMBuildingError except Exception as e : # pragma: no cover with suppress ( FileNotFoundError ): destfile . unlink () if not isinstance ( e , NPMBuildingError ): flog . write ( str ( e )) for line in str ( e ) . splitlines (): ulogger . error ( f \" { line . rstrip () } \" ) ulogger . error ( f \"(!) Failed. See: { logfile } \" ) sys . exit ( 1 ) def init_pipeline_data ( self , pipen : Pipen ) -> None : DOCS \"\"\"Write data to workdir\"\"\" self . pipeline_data = { \"pipeline\" : { \"name\" : pipen . name , \"desc\" : pipen . desc , }, \"versions\" : version_str , \"entries\" : [ # Either a proc or a procgroup ], } procgroups = {} for i , proc in enumerate ( pipen . procs ): if not ( getattr ( proc , \"plugin_opts\" ) or {}) . get ( \"report\" , False ): continue entry = { \"name\" : proc . name , \"desc\" : proc . desc or desc_from_docstring ( proc , Proc ), \"npages\" : 1 , \"report_toc\" : True , \"order\" : (( proc . plugin_opts or {}) . get ( \"report_order\" , 0 ) * 1000 + i ), } pg = proc . __meta__ [ \"procgroup\" ] if self . no_collapse_pgs is True or ( pg and pg . name in self . no_collapse_pgs ): # pragma: no cover pg = None if pg and pg . name not in procgroups : procgroups [ pg . name ] = { \"name\" : pg . name , \"desc\" : desc_from_docstring ( pg . __class__ , ProcGroup ), \"order\" : entry [ \"order\" ], \"procs\" : [ entry ], } self . pipeline_data [ \"entries\" ] . append ( procgroups [ pg . name ]) elif pg : procgroups [ pg . name ][ \"order\" ] = min ( procgroups [ pg . name ][ \"order\" ], entry [ \"order\" ] ) procgroups [ pg . name ][ \"procs\" ] . append ( entry ) else : self . pipeline_data [ \"entries\" ] . append ( entry ) self . pipeline_data [ \"entries\" ] . sort ( key = lambda x : x [ \"order\" ]) # Write the initial data to check if home page is cached datafile = self . workdir / \"src\" / \"init_data.json\" if ( not datafile . exists () or json . loads ( datafile . read_text ()) != self . pipeline_data ): with datafile . open ( \"w\" ) as f : json . dump ( self . pipeline_data , f , indent = 2 ) def _update_proc_meta ( self , proc : Proc , npages : int ) -> None : \"\"\"Update the number of pages for a process\"\"\" runinfo_sess_file = proc . workdir / \"0\" / \"job.runinfo.session\" runinfo_time_file = proc . workdir / \"0\" / \"job.runinfo.time\" runinfo_dev_file = proc . workdir / \"0\" / \"job.runinfo.device\" runinfo_sess = ( runinfo_sess_file . read_text () if runinfo_sess_file . exists () else ( \"pipen-runinfo plugin not enabled or language not supported \" \"for saving session information.\" ) ) runinfo_time = ( textwrap . dedent ( runinfo_time_file . read_text ()) if runinfo_time_file . exists () else \"pipen-runinfo plugin not enabled.\" ) runinfo_dev = ( runinfo_dev_file . read_text () if runinfo_dev_file . exists () else \"pipen-runinfo plugin not enabled.\" ) to_update = { \"npages\" : npages , \"desc\" : proc . desc , \"report_toc\" : proc . plugin_opts . get ( \"report_toc\" , True ), \"runinfo\" : { \"session\" : runinfo_sess , \"time\" : runinfo_time , \"device\" : runinfo_dev , }, } pg = proc . __meta__ [ \"procgroup\" ] if self . no_collapse_pgs is True or ( pg and pg . name in self . no_collapse_pgs ): # pragma: no cover pg = None for entry in self . pipeline_data [ \"entries\" ]: if pg and entry [ \"name\" ] == pg . name : for p in entry [ \"procs\" ]: if p [ \"name\" ] == proc . name : p . update ( to_update ) break break elif entry [ \"name\" ] == proc . name : entry . update ( to_update ) break def render_proc_report ( self , proc : Proc ): DOCS \"\"\"Render the report template for a process Args: proc: The process status: The status of the process \"\"\" rendering_data = self . _rendering_data ( proc ) # Render the report # in case it's a Path object report = str ( proc . plugin_opts [ \"report\" ]) report_toc = proc . plugin_opts . get ( \"report_toc\" , True ) report_paging = proc . plugin_opts . get ( \"report_paging\" , False ) report_relpath_tags = proc . plugin_opts . get ( \"report_relpath_tags\" , None ) or {} if report . startswith ( \"file://\" ): report_tpl = Path ( report [ 7 :]) if not report_tpl . is_absolute (): base = get_base ( proc . __class__ , Proc , report , lambda klass : ( None if klass . plugin_opts is None else str ( klass . plugin_opts . get ( \"report\" , None )) ), ) report_tpl = Path ( inspect . getfile ( base )) . parent / report_tpl report = report_tpl . read_text () template_opts = self . _template_opts ( proc . template_opts ) try : rendered = _render_file ( proc . template , template_opts , # type: ignore[arg-type] report , rendering_data , ) except Exception as exc : # pragma: no cover raise TemplateRenderingError ( f \"[ { proc . name } ] Failed to render report file.\" ) from exc mounted_outdir = getattr ( proc . xqute . scheduler , \"MOUNTED_OUTDIR\" , None ) if mounted_outdir : mounted_outdir = ( MountedPath ( proc . pipeline . outdir , spec = mounted_outdir ) / \"REPORTS\" ) else : mounted_outdir = self . outdir # preprocess the rendered report and get the toc rendered_parts , toc = preprocess ( rendered , mounted_outdir , report_toc , report_paging , report_relpath_tags , logfn = lambda * args , ** kwargs : proc . log ( * args , ** kwargs , logger = logger ), ) if len ( toc ) > 10 and not report_paging : # pragma: no cover proc . log ( \"warning\" , \"There are > 10 sections in the report, \" \"enable paging (`report_paging`) ?\" , logger = logger , ) npages = len ( rendered_parts ) # Update npages in data.json self . _update_proc_meta ( proc , npages ) for i , rendered_part in enumerate ( rendered_parts ): self . _render_page ( rendered = rendered_part , name = proc . name , page = i , toc = toc , ) return npages def _render_page ( self , rendered : str , name : str , page : int , toc : List [ Mapping [ str , Any ]] | None , ) -> Path : \"\"\"Render a page of the report\"\"\" tpl_dir = self . nmdir . joinpath ( \"src\" , \"pages\" , \"proc\" ) if page == 0 : dest_dir = self . workdir . joinpath ( \"src\" , \"pages\" , name ) else : dest_dir = self . workdir . joinpath ( \"src\" , \"pages\" , f \" { name } - { page } \" ) run_copy ( str ( tpl_dir ), dest_dir , overwrite = True , quiet = True , data = { \"name\" : name , \"page\" : page }, skip_if_exists = [ \"proc.svelte\" ], ) rendered_report = dest_dir / \"proc.svelte\" with dest_dir . joinpath ( \"toc.json\" ) . open ( \"w\" ) as f : json . dump ( toc , f , indent = 2 ) if not rendered_report . exists () or rendered_report . read_text () != rendered : rendered_report . write_text ( rendered ) return rendered_report async def build ( DOCS self , proc : Proc | str , nobuild : bool , force_build : bool , cached : bool = False , ) -> None : \"\"\"Build report for a process Args: proc: The process nobuild: Don't build the report cached: Whether the process is cached \"\"\" ulogger = UnifiedLogger ( logger , proc ) if proc == \"_index\" : if nobuild : # pragma: no cover ulogger . debug ( \"`report_nobuild` is True, skipping building home page.\" ) else : self . _npm_run_build ( cwd = self . workdir , proc = \"_index\" , ulogger = ulogger , force_build = force_build , cached = cached , ) return npages = self . render_proc_report ( proc ) datafile = self . workdir / \"src\" / \"data.json\" with datafile . open ( \"w\" ) as f : json . dump ( self . pipeline_data , f , indent = 2 ) if nobuild or self . nobuild : # pragma: no cover ulogger . debug ( \"`report_nobuild` is True, skipping building report.\" ) return procgroup = get_marked ( proc , \"procgroup\" ) self . _npm_run_build ( cwd = self . workdir , proc = proc . name , ulogger = ulogger , force_build = force_build , cached = cached , npages = npages , procgroup = procgroup . name if procgroup else None , ) async def sync_reports ( self , logfn : Callable | None = None ) -> None : DOCS \"\"\"Sync the reports to the cloud output directory if needed\"\"\" if hasattr ( self . outdir , \"spec\" ) and isinstance ( self . outdir . spec , CloudPath ): if logfn : logfn ( \"info\" , \"Syncing reports to cloud ...\" , logger = logger ) else : logger . info ( \"Syncing reports to cloud ...\" ) logger . info ( f \" { self . outdir } \" ) logger . info ( f \" \u2192 { self . outdir . spec } \" ) rsync_to_cloud ( self . outdir )","title":"pipen_report.report_manager"},{"location":"api/source/pipen_report.report_plugin/","text":"SOURCE CODE pipen_report. report_plugin DOCS \"\"\"Report generation system for pipen\"\"\" from __future__ import annotations from hashlib import sha256 from tempfile import gettempdir from typing import TYPE_CHECKING , Union from pipen import plugin from .utils import get_config , logger from .versions import __version__ # noqa: F401 from .report_manager import ReportManager if TYPE_CHECKING : from pipen import Pipen , Proc class PipenReport : DOCS \"\"\"Report plugin for pipen Configurations: report: The report template or file, None to disable report_order: The order of the process to show in the index page and app menu report_toc: Whether include TOC for the process report or not report_paging: Split the report for a process by h1's None: don't split; 3: 3 h1's in a page report_loglevel: logging level report_force_export: Force the process to export output when report template is given report_npm: Path to npm report_nmdir: Where should the frontend dependencies installed? By default, the frontend dependencies will be installed in frontend/ of the python package directory. However, this directory may not be writable. In this case, the frontend dependencies will be installed in the directory specified. report_nobuild: Don't build the final report. If True only preprare the environment Say if you want to do the building manually report_extlibs: External components to be used in the report report_no_collapse_pgs: Don't collapse the procgroups in the index page \"\"\" version = __version__ name = \"report\" instantiate = True @plugin . impl async def on_init ( self , pipen : Pipen ) -> None : \"\"\"Default configrations\"\"\" # pipeline-level # logging level pipen . config . plugin_opts . setdefault ( \"report_loglevel\" , \"info\" ) # pipeline-level # Force the process to export output when report template is given pipen . config . plugin_opts . setdefault ( \"report_force_export\" , True ) # pipeline-level # Force the process to rebuild the report when cached pipen . config . plugin_opts . setdefault ( \"report_force_build\" , False ) # pipeline-level pipen . config . plugin_opts . setdefault ( \"report_npm\" , None ) # pipeline-level pipen . config . plugin_opts . setdefault ( \"report_nmdir\" , None ) # pipeline-level pipen . config . plugin_opts . setdefault ( \"report_nobuild\" , None ) # pipeline-level pipen . config . plugin_opts . setdefault ( \"report_extlibs\" , None ) # pipeline-level pipen . config . plugin_opts . setdefault ( \"report_no_collapse_pgs\" , False ) # pipeline-level # Tags with properties that need to convert to relative paths # i.e. {\"Image\": \"src\"} pipen . config . plugin_opts . setdefault ( \"report_relpath_tags\" , None ) # pipeline-level # The base temporary directory when workdir is on cloud pipen . config . plugin_opts . setdefault ( \"report_cachedir_for_cloud\" , None ) # process-level: The report template or file, None to disable pipen . config . plugin_opts . setdefault ( \"report\" , None ) # process-level # The order of the process to show in the index page and app menu pipen . config . plugin_opts . setdefault ( \"report_order\" , 0 ) # process-level # Whether include TOC for the process report or not pipen . config . plugin_opts . setdefault ( \"report_toc\" , True ) # process-level # Split the report for a process by h1's # None: don't split; 3: 3 h1's in a page pipen . config . plugin_opts . setdefault ( \"report_paging\" , False ) @plugin . impl async def on_start ( self , pipen : Pipen ) -> None : \"\"\"Check if we have the prerequisites for report generation\"\"\" loglevel = pipen . config . plugin_opts . report_loglevel logger . setLevel ( loglevel if isinstance ( loglevel , int ) else loglevel . upper ()) plugin_opts = pipen . config . plugin_opts or {} cachedir_for_cloud = pipen . config . plugin_opts . report_cachedir_for_cloud if cachedir_for_cloud is None : dig = sha256 ( f \" { pipen . workdir } ... { pipen . outdir } \" . encode ()) . hexdigest ()[: 8 ] cachedir_for_cloud = f \" { gettempdir () } /pipen-report-cache- { dig } \" self . manager = ReportManager ( plugin_opts , pipen . outdir , pipen . workdir , cachedir_for_cloud = cachedir_for_cloud , ) self . manager . check_npm_and_setup_dirs () self . manager . init_pipeline_data ( pipen ) if len ( self . manager . pipeline_data [ \"entries\" ]) > 0 : await self . manager . build ( \"_index\" , get_config ( \"nobuild\" , plugin_opts . get ( \"report_nobuild\" )), get_config ( \"force_build\" , plugin_opts . get ( \"report_force_build\" )), True , ) await self . manager . sync_reports () @plugin . impl def on_proc_create ( self , proc : Proc ) -> None : \"\"\"For a non-export process to export if report template is given\"\"\" # proc.plugin_opts not updated yet, check pipeline options try : pipeline_plugin_opts = proc . pipeline . config . get ( \"plugin_opts\" , {}) except AttributeError : # pragma: no cover # in case pipeline initialization fails return proc_plugin_opts = proc . plugin_opts or {} if not proc_plugin_opts . get ( \"report_force_export\" , pipeline_plugin_opts . get ( \"report_force_export\" , False ), ): return if not proc_plugin_opts . get ( \"report\" , False ): return if proc . export is not None : return proc . export = True @plugin . impl async def on_proc_done ( self , proc : Proc , succeeded : Union [ str , bool ]) -> None : \"\"\"Generate reports for each process\"\"\" if succeeded is False : return plugin_opts = proc . plugin_opts or {} if not plugin_opts . get ( \"report\" , False ): return await self . manager . build ( proc , get_config ( \"nobuild\" , plugin_opts . get ( \"report_nobuild\" )), get_config ( \"force_build\" , plugin_opts . get ( \"report_force_build\" )), succeeded == \"cached\" , ) await self . manager . sync_reports ( logfn = proc . log ) @plugin . impl async def on_complete ( self , pipen : Proc , succeeded : bool ) -> None : \"\"\"Render and compile the entire report\"\"\" if not succeeded : return plugin_opts = pipen . config . plugin_opts or {} nobuild = get_config ( \"nobuild\" , plugin_opts . get ( \"report_nobuild\" )) if not nobuild and len ( self . manager . pipeline_data [ \"entries\" ]) > 0 : logger . info ( \"View the reports at %s \" , self . manager . outdir ) logger . info ( \"Or run the following command to serve them:\" ) logger . info ( \"$ pipen report serve -r %s \" , self . manager . outdir . parent ) del self . manager self . manager = None","title":"pipen_report.report_plugin"},{"location":"api/source/pipen_report.utils/","text":"SOURCE CODE pipen_report. utils DOCS from __future__ import annotations import json from os import path from hashlib import md5 from functools import wraps from tempfile import gettempdir from typing import TYPE_CHECKING , Any , Callable from cloudpathlib.exceptions import OverwriteNewerCloudError from xqute.path import MountedPath from pipen.utils import get_logger from pipen import Proc # type: ignore[import] from . import defaults if TYPE_CHECKING : from logging import Logger from xqute.path import MountedCloudPath , MountedLocalPath logger = get_logger ( \"report\" ) def get_config ( key : str , runtime_value : Any = None ) -> Any : DOCS \"\"\"Get the configuration\"\"\" if runtime_value is not None : return runtime_value default = getattr ( defaults , key . upper ()) return defaults . CONFIG . get ( key , default ) def _stringify ( obj : Any ) -> str : \"\"\"Stringify an object\"\"\" if isinstance ( obj , list ): return \"[\" + \", \" . join ( map ( _stringify , obj )) + \"]\" if isinstance ( obj , tuple ): return \"(\" + \", \" . join ( map ( _stringify , obj )) + \")\" if isinstance ( obj , dict ): return \"{\" + \", \" . join ( f \" { k } : { _stringify ( obj [ k ]) } \" for k in sorted ( obj )) + \"}\" if callable ( obj ): return f \"<callable { obj . __name__ } >\" if isinstance ( obj , Proc ): return repr ( obj . __class__ ) return repr ( obj ) def cache_fun ( func : Callable ) -> Callable : DOCS \"\"\"Decorator to cache the result of a function to disk\"\"\" @wraps ( func ) def wrapper ( * args : Any , ** kwargs : Any ) -> Any : str_args = _stringify ( args ) str_kwargs = _stringify ( kwargs ) sig = md5 ( f \" { str_args } \\n { str_kwargs } \" . encode ( \"utf-8\" )) . hexdigest () sigfile = path . join ( gettempdir (), f \"pipen-report. { func . __name__ } . { sig } .json\" , ) if not path . exists ( sigfile ): result = func ( * args , ** kwargs ) with open ( sigfile , \"w\" ) as fout : json . dump ( result , fout ) else : with open ( sigfile , \"r\" ) as fin : result = json . load ( fin ) return result return wrapper def rsync_to_cloud ( path : MountedCloudPath | MountedLocalPath ) -> None : # path must have a spec attribute and it must be a cloud path spec = path . spec if path . is_file (): try : spec . _upload_local_to_cloud ( force_overwrite_to_cloud = False ) # type: ignore except OverwriteNewerCloudError : spec . _upload_local_to_cloud ( force_overwrite_to_cloud = True ) # type: ignore else : # is_dir() spec . mkdir ( parents = True , exist_ok = True ) # type: ignore for subpath in path . iterdir (): subpath = MountedPath ( subpath , spec = spec / subpath . name ) # type: ignore rsync_to_cloud ( subpath ) # type: ignore class UnifiedLogger : # pragma: no cover def __init__ ( self , logger : Logger , proc : Proc | str ): self . logger = logger self . proc = None if not isinstance ( proc , Proc ) else proc def log ( self , level : str , msg : str , * args : Any , ** kwargs : Any ) -> None : \"\"\"Log a message\"\"\" if self . proc is None : getattr ( self . logger , level )( msg , * args , ** kwargs ) else : self . proc . log ( level , msg , * args , ** kwargs , logger = self . logger ) def debug ( self , msg : str , * args : Any , ** kwargs : Any ) -> None : self . log ( \"debug\" , msg , * args , ** kwargs ) def info ( self , msg : str , * args : Any , ** kwargs : Any ) -> None : self . log ( \"info\" , msg , * args , ** kwargs ) def warning ( self , msg : str , * args : Any , ** kwargs : Any ) -> None : self . log ( \"warning\" , msg , * args , ** kwargs ) def error ( self , msg : str , * args : Any , ** kwargs : Any ) -> None : self . log ( \"error\" , msg , * args , ** kwargs ) def critical ( self , msg : str , * args : Any , ** kwargs : Any ) -> None : self . log ( \"critical\" , msg , * args , ** kwargs )","title":"pipen_report.utils"},{"location":"api/source/pipen_report.versions/","text":"SOURCE CODE pipen_report. versions DOCS \"\"\"Provides pipen and pipen-report versions\"\"\" from pipen import __version__ as pipen_version # pipen-report version __version__ = \"0.23.14\" version_str = f \"\"\" <a href=\"https://github.com/pwwang/pipen\" target=\"_blank\"> pipen v { pipen_version } </a> and <a href=\"https://github.com/pwwang/pipen-report\" target=\"_blank\"> pipen-report v { __version__ } </a> \"\"\"","title":"pipen_report.versions"}]}